use log/logger::Logger
use cicd/runners::CicdDispatchEngine
use cicd/runners::CicdRunnerEngine
use cicd/runners::setupRunner
use cicd/steps::stepOn
use work/resources::|container
use work/resources/arch::Arch
use work/resources::|volume
use work/resources::|mount

treatment runnerBuild[cicd: CicdDispatchEngine, runner: CicdRunnerEngine, logger: Logger](name: string, on: Arch, rust_memory: u32 = 4000, rust_storage: u32 = 5000)
  input trigger: Block<void>
  output ready:  Block<void>
{
    setupRunner[
        dispatcher=cicd,
        runner=runner,
        logger=logger
    ](
        name=name,
        cpu=1,
        memory=500,
        storage=1300,
        volumes=[|volume("compilation-result", 1000)],
        containers=[|container("rust", rust_memory, 2, rust_storage, on, [|mount("compilation-result", "/mounted/result")], "rust:bullseye", _)],
        stop_on_failure=false
    )
    Self.trigger -> setupRunner.trigger,ready -> Self.ready
}
