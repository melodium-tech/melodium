
use core/conversion/scalar::U8ToString as CoreU8ToString

/**
Convert stream of `u8` into `string`.

`u8` gets converted into `string`, and the resulting strings are send through stream in continuity.
*/
sequence U8ToString()
  input  value: Stream<u8>
  output value: Stream<string>
{
    CoreU8ToString()

    Self.value -> CoreU8ToString.value,value -> Self.value
}



use core/conversion/scalar::U16ToString as CoreU16ToString

/**
Convert stream of `u16` into `string`.

`u16` gets converted into `string`, and the resulting strings are send through stream in continuity.
*/
sequence U16ToString()
  input  value: Stream<u16>
  output value: Stream<string>
{
    CoreU16ToString()

    Self.value -> CoreU16ToString.value,value -> Self.value
}



use core/conversion/scalar::U32ToString as CoreU32ToString

/**
Convert stream of `u32` into `string`.

`u32` gets converted into `string`, and the resulting strings are send through stream in continuity.
*/
sequence U32ToString()
  input  value: Stream<u32>
  output value: Stream<string>
{
    CoreU32ToString()

    Self.value -> CoreU32ToString.value,value -> Self.value
}



use core/conversion/scalar::U64ToString as CoreU64ToString

/**
Convert stream of `u64` into `string`.

`u64` gets converted into `string`, and the resulting strings are send through stream in continuity.
*/
sequence U64ToString()
  input  value: Stream<u64>
  output value: Stream<string>
{
    CoreU64ToString()

    Self.value -> CoreU64ToString.value,value -> Self.value
}



use core/conversion/scalar::U128ToString as CoreU128ToString

/**
Convert stream of `u128` into `string`.

`u128` gets converted into `string`, and the resulting strings are send through stream in continuity.
*/
sequence U128ToString()
  input  value: Stream<u128>
  output value: Stream<string>
{
    CoreU128ToString()

    Self.value -> CoreU128ToString.value,value -> Self.value
}



use core/conversion/scalar::I8ToString as CoreI8ToString

/**
Convert stream of `i8` into `string`.

`i8` gets converted into `string`, and the resulting strings are send through stream in continuity.
*/
sequence I8ToString()
  input  value: Stream<i8>
  output value: Stream<string>
{
    CoreI8ToString()

    Self.value -> CoreI8ToString.value,value -> Self.value
}



use core/conversion/scalar::I16ToString as CoreI16ToString

/**
Convert stream of `i16` into `string`.

`i16` gets converted into `string`, and the resulting strings are send through stream in continuity.
*/
sequence I16ToString()
  input  value: Stream<i16>
  output value: Stream<string>
{
    CoreI16ToString()

    Self.value -> CoreI16ToString.value,value -> Self.value
}



use core/conversion/scalar::I32ToString as CoreI32ToString

/**
Convert stream of `i32` into `string`.

`i32` gets converted into `string`, and the resulting strings are send through stream in continuity.
*/
sequence I32ToString()
  input  value: Stream<i32>
  output value: Stream<string>
{
    CoreI32ToString()

    Self.value -> CoreI32ToString.value,value -> Self.value
}



use core/conversion/scalar::I64ToString as CoreI64ToString

/**
Convert stream of `i64` into `string`.

`i64` gets converted into `string`, and the resulting strings are send through stream in continuity.
*/
sequence I64ToString()
  input  value: Stream<i64>
  output value: Stream<string>
{
    CoreI64ToString()

    Self.value -> CoreI64ToString.value,value -> Self.value
}



use core/conversion/scalar::I128ToString as CoreI128ToString

/**
Convert stream of `i128` into `string`.

`i128` gets converted into `string`, and the resulting strings are send through stream in continuity.
*/
sequence I128ToString()
  input  value: Stream<i128>
  output value: Stream<string>
{
    CoreI128ToString()

    Self.value -> CoreI128ToString.value,value -> Self.value
}



use core/conversion/scalar::F32ToString as CoreF32ToString

/**
Convert stream of `f32` into `string`.

`f32` gets converted into `string`, and the resulting strings are send through stream in continuity.
*/
sequence F32ToString()
  input  value: Stream<f32>
  output value: Stream<string>
{
    CoreF32ToString()

    Self.value -> CoreF32ToString.value,value -> Self.value
}



use core/conversion/scalar::F64ToString as CoreF64ToString

/**
Convert stream of `f64` into `string`.

`f64` gets converted into `string`, and the resulting strings are send through stream in continuity.
*/
sequence F64ToString()
  input  value: Stream<f64>
  output value: Stream<string>
{
    CoreF64ToString()

    Self.value -> CoreF64ToString.value,value -> Self.value
}



use core/conversion/scalar::BoolToString as CoreBoolToString

/**
Convert stream of `bool` into `string`.

`bool` gets converted into `string`, and the resulting strings are send through stream in continuity.
*/
sequence BoolToString()
  input  value: Stream<bool>
  output value: Stream<string>
{
    CoreBoolToString()

    Self.value -> CoreBoolToString.value,value -> Self.value
}



use core/conversion/scalar::ByteToString as CoreByteToString

/**
Convert stream of `byte` into `string`.

`byte` gets converted into `string`, and the resulting strings are send through stream in continuity.
*/
sequence ByteToString()
  input  value: Stream<byte>
  output value: Stream<string>
{
    CoreByteToString()

    Self.value -> CoreByteToString.value,value -> Self.value
}



use core/conversion/scalar::CharToString as CoreCharToString

/**
Convert stream of `char` into `string`.

`char` gets converted into `string`, and the resulting strings are send through stream in continuity.
*/
sequence CharToString()
  input  value: Stream<char>
  output value: Stream<string>
{
    CoreCharToString()

    Self.value -> CoreCharToString.value,value -> Self.value
}


