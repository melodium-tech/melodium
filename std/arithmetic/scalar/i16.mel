use core/arithmetic/scalar::StaticAddI16

/**
Add a static value to `i16`.

Every number passed through the stream get `add` added.
*/
sequence StaticAdd(var add: i16 = 0)
  input  value: Stream<i16>
  output value: Stream<i16>
{
    StaticAddI16(add=add)

    Self.value -> StaticAddI16.value,value -> Self.value
}

use core/arithmetic/scalar::AddI16

/**
Add values from two streams of `i16`.

Values passed through a & b are added and send in sum.

*/
sequence Add()
  input  a:   Stream<i16>
  input  b:   Stream<i16>
  output sum: Stream<i16>
{
    AddI16()

    Self.a -> AddI16.a
    Self.b -> AddI16.b
    
    AddI16.sum -> Self.sum
}

use core/arithmetic/scalar::StaticSubI16 

/**
Substract a static value to `i16`.

Every number passed through the stream get `sub` substracted.

*/
sequence StaticSub(var sub: i16 = 0)
  input  value: Stream<i16>
  output value: Stream<i16>
{
    StaticSubI16(sub=sub)

    Self.value -> StaticSubI16.value,value -> Self.value
}


use core/arithmetic/scalar::SubI16 

/**
Substract values from two streams of `i16`.

Every `a` number passed through the stream get `b` substracted.

*/
sequence Sub()
  input  a:          Stream<i16>
  input  b:          Stream<i16>
  output difference: Stream<i16>
{
    SubI16()

    Self.a -> SubI16.a
    Self.b -> SubI16.b
    
    SubI16.difference -> Self.difference
}


use core/arithmetic/scalar::StaticMultI16 

/**
Multiply `i16` by static value.

Every number passed through the stream is multiplied by `factor`.

*/
sequence StaticMult(var factor: i16 = 0)
  input  value: Stream<i16>
  output value: Stream<i16>
{
    StaticMultI16(factor=factor)

    Self.value -> StaticMultI16.value,value -> Self.value
}


use core/arithmetic/scalar::MultI16 

/**
Multiply values from two streams of `i16`.

Every `a` number passed through the stream is multiplied by `b`.

*/
sequence Mult()
  input  a:       Stream<i16>
  input  b:       Stream<i16>
  output product: Stream<i16>
{
    MultI16()

    Self.a -> MultI16.a
    Self.b -> MultI16.b
    
    MultI16.product -> Self.product
}


use core/arithmetic/scalar::StaticDivI16 

/**
Divide a stream of `i16` by a static value.

Every number passed through the stream is divided by `divisor`.

*/
sequence StaticDiv(var divisor: i16 = 0)
  input  value: Stream<i16>
  output value: Stream<i16>
{
    StaticDivI16(divisor=divisor)

    Self.value -> StaticDivI16.value,value -> Self.value
}


use core/arithmetic/scalar::DivI16 

/**
Divide values from two streams of `i16`.

Every `a` number passed through the stream is divided by `b`.

*/
sequence Div()
  input  a:        Stream<i16>
  input  b:        Stream<i16>
  output quotient: Stream<i16>
{
    DivI16()

    Self.a -> DivI16.a
    Self.b -> DivI16.b
    
    DivI16.quotient -> Self.quotient
}


use core/arithmetic/scalar::StaticRemI16 

/**
Give the remainder of a stream of `i16` divided by a static value.

Every number passed through the stream is divided by `divisor` and the remainder is outputted.

*/
sequence StaticRem(var divisor: i16 = 0)
  input  value: Stream<i16>
  output value: Stream<i16>
{
    StaticRemI16(divisor=divisor)

    Self.value -> StaticRemI16.value,value -> Self.value
}


use core/arithmetic/scalar::RemI16 

/**
Give the remainder of the division from two streams of `i16`.

Every `a` number passed through the stream is divided by `b` and the remainder is outputted.

*/
sequence Rem()
  input  a:         Stream<i16>
  input  b:         Stream<i16>
  output remainder: Stream<i16>
{
    RemI16()

    Self.a -> RemI16.a
    Self.b -> RemI16.b
    
    RemI16.remainder -> Self.remainder
}




use core/arithmetic/scalar::StaticPowI16 

/**
Elevates `i16` to the power of a static value.

Every number passed through the stream get elevated to the power of `exponent`.
*/
sequence StaticPow(var exponent: i16 = 0)
  input  value: Stream<i16>
  output value: Stream<i16>
{
    StaticPowI16(exponent=exponent)

    Self.value -> StaticPowI16.value,value -> Self.value
}


use core/arithmetic/scalar::PowI16 

/**
Elevates values from a stream of `i16` to the power of another one.

Values passed through `base` are elevated to the power of `exponent`.

*/
sequence Pow()
  input  base:     Stream<i16>
  input  exponent: Stream<i16>
  output power:    Stream<i16>
{
    PowI16()

    Self.base -----> PowI16.base
    Self.exponent -> PowI16.exponent
    
    PowI16.power -> Self.power
}

use core/arithmetic/scalar::AbsI16

/**
Get the absolute values from a stream of `i16`.

*/
sequence Abs()
  input  value: Stream<i16>
  output value: Stream<i16>
{
    AbsI16()

    Self.value -> AbsI16.value,value -> Self.value
}
