#!/usr/bin/env melodium
#! name = complex_call
#! version = 0.9.0-pre.4
#! require = std:=0.9.0-pre.4
#! require = fs:=0.9.0-pre.4

use std/engine/util::startup
use std/flow::generate
use std/flow::emit
use std/flow::fill
use std/flow::count
use std/flow::stream
use std/flow::trigger
use fs/file::write
use fs/local::|local_filesystem
use fs/filesystem::FileSystem
use std/conv::toBytes
use std/flow/vec::flatten
use std/ops/num::|add
use std/ops/option/block::unwrap

treatment main(const content: string = "this is some text", var generate: u128 = 873, const output: string) {
    startup()
    generate_arbitrary(length = |add<u128>(generate, 3), text = content)
    count_writer(output_file = output)

    startup.trigger -> generate_arbitrary.trigger,generated -> count_writer.text
}

treatment generate_arbitrary(var length: u128, const text: string)
  input trigger: Block<void>
  output generated: Stream<string>
{
    effective_generator(size = length)
    converter(content = text)

    Self.trigger -> effective_generator.trigger,data -> converter.stream,text -> Self.generated
}

treatment effective_generator(var size: u128)
  input trigger: Block<void>
  output data: Stream<void>
{
    generate<void>(data=_)
    emit<u128>(value=size)

    Self.trigger -> emit.trigger,emit -> generate.length,stream -> Self.data 
}

treatment converter(var content: string)
  input stream: Stream<void>
  output text: Stream<string>
{
    fill<string>(value=content)

    Self.stream -> fill.pattern,filled -> Self.text
}

treatment count_writer(var output_file: string)
    input text: Stream<string>
{
    count<string>()
    trigger<u128>()
    stream<u128>()
    write()
    emit<string>(value=output_file)
    emitFS: emit<Option<FileSystem>>(value=|local_filesystem(_))
    unwrap<FileSystem>()
    toBytes<u128>()
    flatten<byte>()

    Self.text -> count.stream,count -> trigger.stream,last -> stream.block,stream -> toBytes.value,data -> flatten.vector,value -> write.data
    trigger.end -> emit.trigger,emit ---> write.path
    trigger.end -> emitFS.trigger,emit -> unwrap.option,value -> write.filesystem
}

