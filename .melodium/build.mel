use log/logger::Logger
use std/data/string_map::StringMap
use std/flow::passBlock
use std/ops/vec::|concat
use std/ops::|condition
use std/ops/option::|wrap
use std/text/compare::|contains
use std/text/compose::|format
use std/data/string_map::|entry
use std/data/string_map::|map
use process/command::Command
use process/command::|command
use process/environment::Environment
use process/environment::|environment
use cicd/runners::CicdDispatchEngine
use cicd/runners::CicdRunnerEngine
use cicd/runners::stopRunner
use cicd/steps::stepOn
use work/resources/arch::Arch
use root/builder::runnerBuild
use root/states::setServiceState

treatment buildMelodium[cicd: CicdDispatchEngine, logger: Logger](target: string, build: bool, release: bool, on: Arch, pre_commands: Vec<Command> = [], environment_variables: StringMap, repository_url: string, gitlab_token: string, pipeline: string, project: string, sha: string, ref: string, rust_memory: u32 = 4000, rust_storage: u32 = 5000, on_github: bool = false, on_gitlab: bool = false)
  model runner: CicdRunnerEngine()
  input trigger: Block<void>
  output data:   Stream<byte>
{
    doBuild: passBlock<void>(cond=build)
    setServiceState[logger=logger](gitlab_root_url="https://gitlab.com/api/v4", token=gitlab_token, project=project, sha=sha, ref=ref, pipeline=pipeline, name=|format("Build target {target}", |entry("target", target)), description="Building Mélodium on Mélodium-managed CI", on_github=on_github, on_gitlab=on_gitlab)
    runnerBuild[cicd=cicd, runner=runner, logger=logger](
        name=target,
        on=on,
        rust_memory=rust_memory,
        rust_storage=rust_storage
    )
    preSteps: stepOn[runner=runner, logger=logger](
        executor_name="rust",
        commands=|concat<Command>([
            |command("mkdir", ["--verbose", "--parents", "/work"])
        ], pre_commands),
        stop_on_failure=false
    )
    gitClone: stepOn[runner=runner, logger=logger](
        executor_name="rust",
        environment=|wrap<Environment>(|environment(environment_variables, "/work", true, false)),
        commands=[
            |command("git", ["config", "--global", "url.https://.insteadOf", "git://"]),
            |command("git", ["clone", repository_url, "melodium"])
        ],
        stop_on_failure=false
    )
    compilation: stepOn[runner=runner, logger=logger](
        executor_name="rust",
        environment=|wrap<Environment>(|environment(environment_variables, "/work/melodium", true, false)),
        commands=[
            |command("rustc", ["--version"]),
            |command("cargo", ["--version"]),
            |command("cargo", ["build", "--package", "melodium", "--target", target, |condition<string>(release, "--release", "")]),
            |command("mv", [|format("target/{target}/{kind}/melodium{ext}", |map([|entry("target", target),|entry("kind", |condition<string>(release, "release", "debug")),|entry("ext", |condition<string>(|contains(target, "windows"), ".exe", ""))])), "/mounted/result/melodium"])
        ],
        out_filesystem="compilation-result",
        out_file="melodium",
        stop_on_failure=true
    )

    stopRunner[runner=runner]()

    Self.trigger -> doBuild.block,passed -> runnerBuild.trigger,ready -> preSteps.trigger,completed -> gitClone.trigger,completed -> compilation.trigger,data -> Self.data
    doBuild.passed -> setServiceState.pending
    runnerBuild.ready -> setServiceState.running
    compilation.completed -> setServiceState.success
    compilation.failed -> setServiceState.failed
    compilation.finished -> stopRunner.trigger
}
/*
treatment buildTester[cicd_distant: CicdDispatchEngine, logger: Logger](target: string, build: bool, on: Arch)
  model cicd_distribution: CicdRunnerEngine()
  input trigger: Block<void>
  output data:   Stream<byte>
{
    doBuild: passBlock<void>(cond=build)
    runnerBuild[cicd_distant=cicd_distant, cicd_distribution=cicd_distribution, logger=logger](
        name=|format("tester-{target}", |entry("target", target)),
        on=on
    )
    preSteps: stepOn[distributor=cicd_distribution, logger=logger](
        executor_name="rust",
        commands=[
            |command("mkdir", ["--verbose", "--parents", "/work"])
        ]
    )
    gitClone: stepOn[distributor=cicd_distribution, logger=logger](
        executor_name="rust",
        environment=|wrap<Environment>(|environment(|map([]), "/work", true, false)),
        commands=[
            |command("git", ["clone", "https://gitlab.com/melodium/melodium.git"])
        ]
    )
    compilation: stepOn[distributor=cicd_distribution, logger=logger](
        executor_name="rust",
        environment=|wrap<Environment>(|environment(|map([]), "/work/melodium/test/testers", true, false)),
        commands=[
            |command("rustc", ["--version"]),
            |command("cargo", ["--version"]),
            |command("cargo", ["build", "--target", target]),
            |command("find", [|format("target/{target}/", |entry("target", target)), "-maxdepth", "1", "-type", "f", "-executable", "-exec", "tar", "--verbose", "--xz", "--append", "--file", "target.tar", "{}", ";"]),
            |command("mv", ["target.tar", "/mounted/result/target.tar"])
        ],
        out_filesystem="compilation-result",
        out_file="target.tar"
    )

    Self.trigger -> doBuild.block,passed -> runnerBuild.trigger,ready -> preSteps.trigger,completed -> gitClone.trigger,completed -> compilation.trigger,data -> Self.data
}
*/