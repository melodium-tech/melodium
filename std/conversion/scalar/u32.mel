use core/conversion/scalar::U32ToVoid

/**
Turns `u32` stream into `void` one.

Send one `iter` per input `value` received.
*/
sequence ToVoid()
  input value: Stream<u32>
  output iter: Stream<void>
{
    U32ToVoid()

    Self.value -> U32ToVoid.value,iter -> Self.iter
}

use core/conversion/scalar::U32ToByte

/**
Convert stream of `u32` into `byte`.

`u32` gets converted into `byte`, and the resulting bytes are send through stream in continuity.
*/
sequence ToByte()
  input  value: Stream<u32>
  output data:  Stream<byte>
{
    U32ToByte()

    Self.value -> U32ToByte.value,data -> Self.data
}

use core/conversion/scalar::U32ToString

/**
Convert stream of `u32` into `string`.

`u32` gets converted into `string`, and the resulting strings are send through stream in continuity.
*/
sequence ToString()
  input  value: Stream<u32>
  output value: Stream<string>
{
    U32ToString()

    Self.value -> U32ToString.value,value -> Self.value
}

use core/cast/scalar::U32ToU64

/**
Convert stream of `u32` into `u64`.

This conversion is lossless, `u32` values can all fit into `u64`.
*/
sequence ToU64()
  input  value: Stream<u32>
  output value: Stream<u64>
{
    U32ToU64()

    Self.value -> U32ToU64.value,value -> Self.value
}


use core/cast/scalar::U32ToU128

/**
Convert stream of `u32` into `u128`.

This conversion is lossless, `u32` values can all fit into `u128`.
*/
sequence ToU128()
  input  value: Stream<u32>
  output value: Stream<u128>
{
    U32ToU128()

    Self.value -> U32ToU128.value,value -> Self.value
}


use core/cast/scalar::U32ToI64

/**
Convert stream of `u32` into `i64`.

This conversion is lossless, `u32` values can all fit into `i64`.
*/
sequence ToI64()
  input  value: Stream<u32>
  output value: Stream<i64>
{
    U32ToI64()

    Self.value -> U32ToI64.value,value -> Self.value
}


use core/cast/scalar::U32ToI128

/**
Convert stream of `u32` into `i128`.

This conversion is lossless, `u32` values can all fit into `i128`.
*/
sequence ToI128()
  input  value: Stream<u32>
  output value: Stream<i128>
{
    U32ToI128()

    Self.value -> U32ToI128.value,value -> Self.value
}


use core/cast/scalar::U32ToF32

/**
Convert stream of `u32` into `f32`.

This conversion is lossless, `u32` values can all fit into `f32`.
*/
sequence ToF32()
  input  value: Stream<u32>
  output value: Stream<f32>
{
    U32ToF32()

    Self.value -> U32ToF32.value,value -> Self.value
}


use core/cast/scalar::U32ToF64

/**
Convert stream of `u32` into `f64`.

This conversion is lossless, `u32` values can all fit into `f64`.
*/
sequence ToF64()
  input  value: Stream<u32>
  output value: Stream<f64>
{
    U32ToF64()

    Self.value -> U32ToF64.value,value -> Self.value
}


use core/cast/scalar::CastScalarU32ToU8

/**
Convert stream of `u32` into `u8`.

As this conversion might be lossy (every possible `u32` value cannot fit into `u8`),
`truncate` allows value to be truncated to fit into a `u8`, and `or_default` set the
value that is assigned when a `u32` is out of range for `u8` and truncation not allowed.

Truncation happens on the binary level, thus: `10010110` (150 if unsigned, -106 if [signed](https://en.wikipedia.org/wiki/Signed_number_representations)) → `0110` (6).
*/
sequence ToU8(var truncate: bool = true, var or_default: u8 = 0)
  input  value: Stream<u32>
  output value: Stream<u8>
{
    CastScalarU32ToU8()

    Self.value -> CastScalarU32ToU8.value,value -> Self.value
}


use core/cast/scalar::CastScalarU32ToU16

/**
Convert stream of `u32` into `u16`.

As this conversion might be lossy (every possible `u32` value cannot fit into `u16`),
`truncate` allows value to be truncated to fit into a `u16`, and `or_default` set the
value that is assigned when a `u32` is out of range for `u16` and truncation not allowed.

Truncation happens on the binary level, thus: `10010110` (150 if unsigned, -106 if [signed](https://en.wikipedia.org/wiki/Signed_number_representations)) → `0110` (6).
*/
sequence ToU16(var truncate: bool = true, var or_default: u16 = 0)
  input  value: Stream<u32>
  output value: Stream<u16>
{
    CastScalarU32ToU16()

    Self.value -> CastScalarU32ToU16.value,value -> Self.value
}


use core/cast/scalar::CastScalarU32ToI8

/**
Convert stream of `u32` into `i8`.

As this conversion might be lossy (every possible `u32` value cannot fit into `i8`),
`truncate` allows value to be truncated to fit into a `i8`, and `or_default` set the
value that is assigned when a `u32` is out of range for `i8` and truncation not allowed.

Truncation happens on the binary level, thus: `10010110` (150 if unsigned, -106 if [signed](https://en.wikipedia.org/wiki/Signed_number_representations)) → `0110` (6).
*/
sequence ToI8(var truncate: bool = true, var or_default: i8 = 0)
  input  value: Stream<u32>
  output value: Stream<i8>
{
    CastScalarU32ToI8()

    Self.value -> CastScalarU32ToI8.value,value -> Self.value
}


use core/cast/scalar::CastScalarU32ToI16

/**
Convert stream of `u32` into `i16`.

As this conversion might be lossy (every possible `u32` value cannot fit into `i16`),
`truncate` allows value to be truncated to fit into a `i16`, and `or_default` set the
value that is assigned when a `u32` is out of range for `i16` and truncation not allowed.

Truncation happens on the binary level, thus: `10010110` (150 if unsigned, -106 if [signed](https://en.wikipedia.org/wiki/Signed_number_representations)) → `0110` (6).
*/
sequence ToI16(var truncate: bool = true, var or_default: i16 = 0)
  input  value: Stream<u32>
  output value: Stream<i16>
{
    CastScalarU32ToI16()

    Self.value -> CastScalarU32ToI16.value,value -> Self.value
}


use core/cast/scalar::CastScalarU32ToI32

/**
Convert stream of `u32` into `i32`.

As this conversion might be lossy (every possible `u32` value cannot fit into `i32`),
`truncate` allows value to be truncated to fit into a `i32`, and `or_default` set the
value that is assigned when a `u32` is out of range for `i32` and truncation not allowed.

Truncation happens on the binary level, thus: `10010110` (150 if unsigned, -106 if [signed](https://en.wikipedia.org/wiki/Signed_number_representations)) → `0110` (6).
*/
sequence ToI32(var truncate: bool = true, var or_default: i32 = 0)
  input  value: Stream<u32>
  output value: Stream<i32>
{
    CastScalarU32ToI32()

    Self.value -> CastScalarU32ToI32.value,value -> Self.value
}


