
release:gitlab:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: ( $CI_COMMIT_TAG )
  needs:
    - job: packaging:zips
      artifacts: true
  script:
    - echo "Making GitLab release Mélodium version $VERSION from tag $CI_COMMIT_TAG"
  release:
    tag_name: $CI_COMMIT_TAG
    name: "Mélodium $VERSION"
    description: 'melodium/CHANGELOG.md'
    assets:
      links:
        - name: Windows ARM 64 bits (arm64, MSVC compiler) – Zip archive
          url: "https://repo.melodium.tech/zips/$VERSION/melodium-${VERSION}_aarch64-pc-windows-msvc.zip"
          link_type: package
        - name: Windows ARM 64 bits (arm64, MSVC compiler) – MSI installer
          url: "https://repo.melodium.tech/install/$VERSION/melodium-${VERSION}_aarch64-pc-windows-msvc.msi"
          link_type: package
        - name: Windows 32 bits (i686, MSVC compiler) – Zip archive
          url: "https://repo.melodium.tech/zips/$VERSION/melodium-${VERSION}_i686-pc-windows-msvc.zip"
          link_type: package
        - name: Windows 32 bits (i686, MSVC compiler) – MSI installer
          url: "https://repo.melodium.tech/install/$VERSION/melodium-${VERSION}_i686-pc-windows-msvc.msi"
          link_type: package
        - name: Windows 32 bits (i686, GNU compiler) – Zip archive
          url: "https://repo.melodium.tech/zips/$VERSION/melodium-${VERSION}_i686-pc-windows-gnu.zip"
          link_type: package
        - name: Windows 32 bits (i686, GNU compiler) – MSI installer
          url: "https://repo.melodium.tech/install/$VERSION/melodium-${VERSION}_i686-pc-windows-gnu.msi"
          link_type: package
        - name: Windows 64 bits (x86_64, MSVC compiler) – Zip archive
          url: "https://repo.melodium.tech/zips/$VERSION/melodium-${VERSION}_x86_64-pc-windows-msvc.zip"
          link_type: package
        - name: Windows 64 bits (x86_64, MSVC compiler) – MSI installer
          url: "https://repo.melodium.tech/install/$VERSION/melodium-${VERSION}_x86_64-pc-windows-msvc.msi"
          link_type: package
        - name: Windows 64 bits (x86_64, GNU compiler) – Zip archive
          url: "https://repo.melodium.tech/zips/$VERSION/melodium-${VERSION}_x86_64-pc-windows-gnu.zip"
          link_type: package
        - name: Windows 64 bits (x86_64, GNU compiler) – MSI installer
          url: "https://repo.melodium.tech/install/$VERSION/melodium-${VERSION}_x86_64-pc-windows-gnu.msi"
          link_type: package
        - name: MacOS ARM 64 bits (arm64) – TGZ archive
          url: "https://repo.melodium.tech/zips/$VERSION/melodium-${VERSION}_aarch64-apple-darwin.tar.gz"
          link_type: package
        - name: MacOS ARM 64 bits (arm64) – Shell installer
          url: "https://repo.melodium.tech/install/$VERSION/melodium-${VERSION}_aarch64-apple-darwin.sh"
          link_type: package
        # - name: MacOS 32 bits (i686)
        #   url: "https://repo.melodium.tech/zips/$VERSION/melodium-${VERSION}_i686-apple-darwin.tar.gz"
        #   link_type: package
        - name: MacOS 64 bits (x86_64) – TGZ archive
          url: "https://repo.melodium.tech/zips/$VERSION/melodium-${VERSION}_x86_64-apple-darwin.tar.gz"
          link_type: package
        - name: MacOS 64 bits (x86_64) – Shell installer
          url: "https://repo.melodium.tech/install/$VERSION/melodium-${VERSION}_x86_64-apple-darwin.sh"
          link_type: package
        - name: Linux ARM 64 bits (arm64, musl) – TGZ archive
          url: "https://repo.melodium.tech/zips/$VERSION/melodium-${VERSION}_aarch64-unknown-linux-musl.tar.gz"
          link_type: package
        - name: Linux ARM 64 bits (arm64, musl) – Shell installer
          url: "https://repo.melodium.tech/install/$VERSION/melodium-${VERSION}_aarch64-unknown-linux-musl.sh"
          link_type: package
        - name: Linux ARM 64 bits (arm64, glibc) – TGZ archive
          url: "https://repo.melodium.tech/zips/$VERSION/melodium-${VERSION}_aarch64-unknown-linux-gnu.tar.gz"
          link_type: package
        - name: Linux ARM 64 bits (arm64, glibc) – Shell installer
          url: "https://repo.melodium.tech/install/$VERSION/melodium-${VERSION}_aarch64-unknown-linux-gnu.sh"
          link_type: package
        - name: Linux 32 bits (i686, musl) – TGZ archive
          url: "https://repo.melodium.tech/zips/$VERSION/melodium-${VERSION}_i686-unknown-linux-musl.tar.gz"
          link_type: package
        - name: Linux 32 bits (i686, musl) – Shell installer
          url: "https://repo.melodium.tech/install/$VERSION/melodium-${VERSION}_i686-unknown-linux-musl.sh"
          link_type: package
        - name: Linux 32 bits (i686, glibc) – TGZ archive
          url: "https://repo.melodium.tech/zips/$VERSION/melodium-${VERSION}_i686-unknown-linux-gnu.tar.gz"
          link_type: package
        - name: Linux 32 bits (i686, glibc) – Shell installer
          url: "https://repo.melodium.tech/install/$VERSION/melodium-${VERSION}_i686-unknown-linux-gnu.sh"
          link_type: package
        - name: Linux 64 bits (x86_64, musl) – TGZ archive
          url: "https://repo.melodium.tech/zips/$VERSION/melodium-${VERSION}_x86_64-unknown-linux-musl.tar.gz"
          link_type: package
        - name: Linux 64 bits (x86_64, musl) – Shell installer
          url: "https://repo.melodium.tech/install/$VERSION/melodium-${VERSION}_x86_64-unknown-linux-musl.sh"
          link_type: package
        - name: Linux 64 bits (x86_64, glibc) – TGZ archive
          url: "https://repo.melodium.tech/zips/$VERSION/melodium-${VERSION}_x86_64-unknown-linux-gnu.tar.gz"
          link_type: package
        - name: Linux 64 bits (x86_64, glibc) – Shell installer
          url: "https://repo.melodium.tech/install/$VERSION/melodium-${VERSION}_x86_64-unknown-linux-gnu.sh"
          link_type: package
        - name: crates.io
          url: "https://crates.io/crates/melodium/$VERSION"
          link_type: other
        - name: docs.rs
          url: "https://docs.rs/melodium/$VERSION/melodium/"
          link_type: other
        - name: Repository
          url: "https://repo.melodium.tech/zips/$VERSION/"
          link_type: other
        - name: Reference
          url: "https://doc.melodium.tech/$VERSION/en/"
          link_type: other

release:publish:zips:
  stage: release
  image: debian:bullseye
  rules:
    - if: ( $CI_COMMIT_TAG )
  variables:
    GIT_STRATEGY: none
  needs:
    - job: packaging:zips
      artifacts: true
  before_script:
    - apt-get update
    - apt-get install -y rsync sshpass
  script:
    - mkdir ~/.ssh
    - ssh-keyscan "$ZIP_RELEASE_PUBLISH_SERVER" >> ~/.ssh/known_hosts
    - mkdir "$VERSION"
    - mv melodium-* SHA256SUMS "$VERSION/"
    - SSHPASS="$ZIP_RELEASE_PUBLISH_PASSWORD" sshpass -e rsync -a "$VERSION" "$ZIP_RELEASE_PUBLISH_USER@$ZIP_RELEASE_PUBLISH_SERVER:$ZIP_RELEASE_PUBLISH_DIRECTORY"

release:publish:installers:
  stage: release
  image: debian:bullseye
  rules:
    - if: ( $CI_COMMIT_TAG )
  variables:
    GIT_STRATEGY: none
  needs:
    - job: packaging:installers:sh
      artifacts: true
    - job: packaging:installers:msi
      artifacts: true
  before_script:
    - apt-get update
    - apt-get install -y rsync sshpass
  script:
    - mkdir ~/.ssh
    - ssh-keyscan "$INSTALLERS_RELEASE_PUBLISH_SERVER" >> ~/.ssh/known_hosts
    - mv melodium_aarch64-pc-windows-msvc.msi melodium-${VERSION}_aarch64-pc-windows-msvc.msi
    - mv melodium_i686-pc-windows-gnu.msi melodium-${VERSION}_i686-pc-windows-gnu.msi
    - mv melodium_i686-pc-windows-msvc.msi melodium-${VERSION}_i686-pc-windows-msvc.msi
    - mv melodium_x86_64-pc-windows-gnu.msi melodium-${VERSION}_x86_64-pc-windows-gnu.msi
    - mv melodium_x86_64-pc-windows-msvc.msi melodium-${VERSION}_x86_64-pc-windows-msvc.msi
    - mkdir "$VERSION"
    - mv melodium-* SHA256SUMS "$VERSION/"
    - SSHPASS="$INSTALLERS_RELEASE_PUBLISH_PASSWORD" sshpass -e rsync -a "$VERSION" "$INSTALLERS_RELEASE_PUBLISH_USER@$INSTALLERS_RELEASE_PUBLISH_SERVER:$INSTALLERS_RELEASE_PUBLISH_DIRECTORY"

release:publish:deb:
  stage: release
  image: debian:bullseye
  rules:
    - if: ( $CI_COMMIT_TAG )
  variables:
    GIT_STRATEGY: none
  needs:
    - job: packaging:installers:deb
      artifacts: true
  before_script:
    - apt-get update
    - apt-get install -y rsync sshpass
  script:
    - mkdir ~/.ssh
    - ssh-keyscan "$DEB_RELEASE_PUBLISH_SERVER" >> ~/.ssh/known_hosts
    - mkdir "$VERSION"
    - mv gnu musl "$VERSION/"
    - SSHPASS="$DEB_RELEASE_PUBLISH_PASSWORD" sshpass -e rsync -a "$VERSION" "$DEB_RELEASE_PUBLISH_USER@$DEB_RELEASE_PUBLISH_SERVER:$DEB_RELEASE_PUBLISH_DIRECTORY"

release:publish:doc:
  stage: release
  image: debian:bullseye
  rules:
    - if: ( $CI_COMMIT_TAG )
  variables:
    GIT_STRATEGY: none
  needs:
    - job: doc:melodium:reference
      artifacts: true
  before_script:
    - apt-get update
    - apt-get install -y rsync sshpass
  script:
    - mkdir ~/.ssh
    - ssh-keyscan "$DOC_RELEASE_PUBLISH_SERVER" >> ~/.ssh/known_hosts
    - mv reference "$VERSION"
    - SSHPASS="$DOC_RELEASE_PUBLISH_PASSWORD" sshpass -e rsync -a "$VERSION" "$DOC_RELEASE_PUBLISH_USER@$DOC_RELEASE_PUBLISH_SERVER:$DOC_RELEASE_PUBLISH_DIRECTORY"

release:publish:packages:
  stage: release
  image: debian:bullseye
  extends:
    - .release-packages
  variables:
    GIT_STRATEGY: none
  needs:
    - job: packaging:packages:repo
      artifacts: true
  before_script:
    - apt-get update
    - apt-get install -y rsync sshpass
  script:
    - mkdir ~/.ssh
    - ssh-keyscan "$PACKAGES_REPO_RELEASE_PUBLISH_SERVER" >> ~/.ssh/known_hosts
    - mv repo "$VERSION"
    - SSHPASS="$PACKAGES_REPO_RELEASE_PUBLISH_PASSWORD" sshpass -e rsync -a "$VERSION" "$PACKAGES_REPO_RELEASE_PUBLISH_USER@$PACKAGES_REPO_RELEASE_PUBLISH_SERVER:$PACKAGES_REPO_RELEASE_PUBLISH_DIRECTORY"

release:publish:containers:
  stage: release
  image: 
      name: quay.io/buildah/stable:v1
  extends:
    - .build-containers
  variables:
    GIT_STRATEGY: none
  needs:
    - job: build:release:x86_64-unknown-linux-musl:container
      artifacts: true
    - job: build:release:i686-unknown-linux-musl:container
      artifacts: true
    - job: build:release:aarch64-unknown-linux-musl:container
      artifacts: true
  before_script:
    - buildah login --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - export BUILDAH_FORMAT=docker
    # scratch
    - manifest=melodium:scratch
    - version=$(target/x86_64-unknown-linux-musl/release/melodium --version | cut -d " " -f2)

    # ARM64
    - container=$(buildah from --platform "linux/arm64" scratch)
    - buildah copy ${container} target/aarch64-unknown-linux-musl/release/melodium /
    - buildah config --entrypoint '["/melodium"]' --cmd 'help' --env MELODIUM_HOME=/.melodium ${container}
    - buildah commit --manifest ${manifest} ${container} melodium-aarch64-unknown-linux-musl
    # 386
    - container=$(buildah from --platform "linux/386" scratch)
    - buildah copy ${container} target/i686-unknown-linux-musl/release/melodium /
    - buildah config --entrypoint '["/melodium"]' --cmd 'help' --env MELODIUM_HOME=/.melodium ${container}
    - buildah commit --manifest ${manifest} ${container} melodium-i686-unknown-linux-musl
    # AMD64
    - container=$(buildah from --platform "linux/amd64" scratch)
    - buildah copy ${container} target/x86_64-unknown-linux-musl/release/melodium /
    - buildah config --entrypoint '["/melodium"]' --cmd 'help' --env MELODIUM_HOME=/.melodium ${container}
    - buildah commit --manifest ${manifest} ${container} melodium-x86_64-unknown-linux-musl

    - buildah images --all
    - buildah manifest inspect $manifest
    - buildah manifest push --all ${manifest} docker://$CI_REGISTRY_IMAGE:scratch-${version}

    # alpine
    - manifest=melodium:alpine
    - version=$(target/x86_64-unknown-linux-musl/release/melodium --version | cut -d " " -f2)

    # ARM64
    - container=$(buildah from --platform "linux/arm64" alpine:latest)
    - buildah copy ${container} target/aarch64-unknown-linux-musl/release/melodium /usr/bin/
    - buildah config --entrypoint '["melodium"]' --cmd 'help' --env MELODIUM_HOME=/usr/share/melodium ${container}
    - buildah commit --manifest ${manifest} ${container} melodium-aarch64-unknown-linux-musl
    # 386
    - container=$(buildah from --platform "linux/386" alpine:latest)
    - buildah copy ${container} target/i686-unknown-linux-musl/release/melodium /usr/bin/
    - buildah config --entrypoint '["melodium"]' --cmd 'help' --env MELODIUM_HOME=/usr/share/melodium ${container}
    - buildah commit --manifest ${manifest} ${container} melodium-i686-unknown-linux-musl
    # AMD64
    - container=$(buildah from --platform "linux/amd64" alpine:latest)
    - buildah copy ${container} target/x86_64-unknown-linux-musl/release/melodium /usr/bin/
    - buildah config --entrypoint '["melodium"]' --cmd 'help' --env MELODIUM_HOME=/usr/share/melodium ${container}
    - buildah commit --manifest ${manifest} ${container} melodium-x86_64-unknown-linux-musl

    - buildah images --all
    - buildah manifest inspect $manifest
    - buildah manifest push --all ${manifest} docker://$CI_REGISTRY_IMAGE:alpine-${version}

    # alpine podman
    - manifest=melodium:alpine-podman
    - version=$(target/x86_64-unknown-linux-musl/release/melodium --version | cut -d " " -f2)

    # ARM64
    - container=$(buildah from --platform "linux/arm64" mgoltzsche/podman:5-minimal)
    - buildah copy ${container} target/aarch64-unknown-linux-musl/release/melodium /usr/bin/
    - buildah config --entrypoint '["melodium"]' --cmd 'help' --env MELODIUM_HOME=/usr/share/melodium ${container}
    - buildah commit --manifest ${manifest} ${container} melodium-aarch64-unknown-linux-musl
    # AMD64
    - container=$(buildah from --platform "linux/amd64" mgoltzsche/podman:5-minimal)
    - buildah copy ${container} target/x86_64-unknown-linux-musl/release/melodium /usr/bin/
    - buildah config --entrypoint '["melodium"]' --cmd 'help' --env MELODIUM_HOME=/usr/share/melodium ${container}
    - buildah commit --manifest ${manifest} ${container} melodium-x86_64-unknown-linux-musl

    - buildah images --all
    - buildah manifest inspect $manifest
    - buildah manifest push --all ${manifest} docker://$CI_REGISTRY_IMAGE:alpine-podman-${version}