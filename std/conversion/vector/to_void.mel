
use core/conversion/vector::U8ToVoid as CoreU8ToVoid

/**
Convert stream of `Vec<u8>` into `Vec<void>` one.

This conversion is useful to extract pattern from a stream of vectors and work on it.

*/
sequence U8ToVoid()
  input  vector:  Stream<Vec<u8>>
  output pattern: Stream<Vec<void>>
{
    CoreU8ToVoid()

    Self.vector -> CoreU8ToVoid.vector,pattern -> Self.pattern
}



use core/conversion/vector::U16ToVoid as CoreU16ToVoid

/**
Convert stream of `Vec<u16>` into `Vec<void>` one.

This conversion is useful to extract pattern from a stream of vectors and work on it.

*/
sequence U16ToVoid()
  input  vector:  Stream<Vec<u16>>
  output pattern: Stream<Vec<void>>
{
    CoreU16ToVoid()

    Self.vector -> CoreU16ToVoid.vector,pattern -> Self.pattern
}



use core/conversion/vector::U32ToVoid as CoreU32ToVoid

/**
Convert stream of `Vec<u32>` into `Vec<void>` one.

This conversion is useful to extract pattern from a stream of vectors and work on it.

*/
sequence U32ToVoid()
  input  vector:  Stream<Vec<u32>>
  output pattern: Stream<Vec<void>>
{
    CoreU32ToVoid()

    Self.vector -> CoreU32ToVoid.vector,pattern -> Self.pattern
}



use core/conversion/vector::U64ToVoid as CoreU64ToVoid

/**
Convert stream of `Vec<u64>` into `Vec<void>` one.

This conversion is useful to extract pattern from a stream of vectors and work on it.

*/
sequence U64ToVoid()
  input  vector:  Stream<Vec<u64>>
  output pattern: Stream<Vec<void>>
{
    CoreU64ToVoid()

    Self.vector -> CoreU64ToVoid.vector,pattern -> Self.pattern
}



use core/conversion/vector::U128ToVoid as CoreU128ToVoid

/**
Convert stream of `Vec<u128>` into `Vec<void>` one.

This conversion is useful to extract pattern from a stream of vectors and work on it.

*/
sequence U128ToVoid()
  input  vector:  Stream<Vec<u128>>
  output pattern: Stream<Vec<void>>
{
    CoreU128ToVoid()

    Self.vector -> CoreU128ToVoid.vector,pattern -> Self.pattern
}



use core/conversion/vector::I8ToVoid as CoreI8ToVoid

/**
Convert stream of `Vec<i8>` into `Vec<void>` one.

This conversion is useful to extract pattern from a stream of vectors and work on it.

*/
sequence I8ToVoid()
  input  vector:  Stream<Vec<i8>>
  output pattern: Stream<Vec<void>>
{
    CoreI8ToVoid()

    Self.vector -> CoreI8ToVoid.vector,pattern -> Self.pattern
}



use core/conversion/vector::I16ToVoid as CoreI16ToVoid

/**
Convert stream of `Vec<i16>` into `Vec<void>` one.

This conversion is useful to extract pattern from a stream of vectors and work on it.

*/
sequence I16ToVoid()
  input  vector:  Stream<Vec<i16>>
  output pattern: Stream<Vec<void>>
{
    CoreI16ToVoid()

    Self.vector -> CoreI16ToVoid.vector,pattern -> Self.pattern
}



use core/conversion/vector::I32ToVoid as CoreI32ToVoid

/**
Convert stream of `Vec<i32>` into `Vec<void>` one.

This conversion is useful to extract pattern from a stream of vectors and work on it.

*/
sequence I32ToVoid()
  input  vector:  Stream<Vec<i32>>
  output pattern: Stream<Vec<void>>
{
    CoreI32ToVoid()

    Self.vector -> CoreI32ToVoid.vector,pattern -> Self.pattern
}



use core/conversion/vector::I64ToVoid as CoreI64ToVoid

/**
Convert stream of `Vec<i64>` into `Vec<void>` one.

This conversion is useful to extract pattern from a stream of vectors and work on it.

*/
sequence I64ToVoid()
  input  vector:  Stream<Vec<i64>>
  output pattern: Stream<Vec<void>>
{
    CoreI64ToVoid()

    Self.vector -> CoreI64ToVoid.vector,pattern -> Self.pattern
}



use core/conversion/vector::I128ToVoid as CoreI128ToVoid

/**
Convert stream of `Vec<i128>` into `Vec<void>` one.

This conversion is useful to extract pattern from a stream of vectors and work on it.

*/
sequence I128ToVoid()
  input  vector:  Stream<Vec<i128>>
  output pattern: Stream<Vec<void>>
{
    CoreI128ToVoid()

    Self.vector -> CoreI128ToVoid.vector,pattern -> Self.pattern
}



use core/conversion/vector::F32ToVoid as CoreF32ToVoid

/**
Convert stream of `Vec<f32>` into `Vec<void>` one.

This conversion is useful to extract pattern from a stream of vectors and work on it.

*/
sequence F32ToVoid()
  input  vector:  Stream<Vec<f32>>
  output pattern: Stream<Vec<void>>
{
    CoreF32ToVoid()

    Self.vector -> CoreF32ToVoid.vector,pattern -> Self.pattern
}



use core/conversion/vector::F64ToVoid as CoreF64ToVoid

/**
Convert stream of `Vec<f64>` into `Vec<void>` one.

This conversion is useful to extract pattern from a stream of vectors and work on it.

*/
sequence F64ToVoid()
  input  vector:  Stream<Vec<f64>>
  output pattern: Stream<Vec<void>>
{
    CoreF64ToVoid()

    Self.vector -> CoreF64ToVoid.vector,pattern -> Self.pattern
}



use core/conversion/vector::BoolToVoid as CoreBoolToVoid

/**
Convert stream of `Vec<bool>` into `Vec<void>` one.

This conversion is useful to extract pattern from a stream of vectors and work on it.

*/
sequence BoolToVoid()
  input  vector:  Stream<Vec<bool>>
  output pattern: Stream<Vec<void>>
{
    CoreBoolToVoid()

    Self.vector -> CoreBoolToVoid.vector,pattern -> Self.pattern
}



use core/conversion/vector::ByteToVoid as CoreByteToVoid

/**
Convert stream of `Vec<byte>` into `Vec<void>` one.

This conversion is useful to extract pattern from a stream of vectors and work on it.

*/
sequence ByteToVoid()
  input  vector:  Stream<Vec<byte>>
  output pattern: Stream<Vec<void>>
{
    CoreByteToVoid()

    Self.vector -> CoreByteToVoid.vector,pattern -> Self.pattern
}



use core/conversion/vector::CharToVoid as CoreCharToVoid

/**
Convert stream of `Vec<char>` into `Vec<void>` one.

This conversion is useful to extract pattern from a stream of vectors and work on it.

*/
sequence CharToVoid()
  input  vector:  Stream<Vec<char>>
  output pattern: Stream<Vec<void>>
{
    CoreCharToVoid()

    Self.vector -> CoreCharToVoid.vector,pattern -> Self.pattern
}



use core/conversion/vector::StringToVoid as CoreStringToVoid

/**
Convert stream of `Vec<string>` into `Vec<void>` one.

This conversion is useful to extract pattern from a stream of vectors and work on it.

*/
sequence StringToVoid()
  input  vector:  Stream<Vec<string>>
  output pattern: Stream<Vec<void>>
{
    CoreStringToVoid()

    Self.vector -> CoreStringToVoid.vector,pattern -> Self.pattern
}


