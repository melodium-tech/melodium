use log/logger::Logger
use cicd/runners::CicdDistantEngine
use cicd/runners::CicdDistributionEngine
use cicd/runners::runner
use cicd/steps::stepOn
use work/resources::|container
use work/resources/arch::Arch
use work/resources::|volume
use work/resources::|mount

treatment runnerBuild[cicd_distant: CicdDistantEngine, cicd_distribution: CicdDistributionEngine, logger: Logger](name: string, on: Arch, rust_memory: u32 = 4000, rust_storage: u32 = 5000)
  input trigger: Block<void>
  output ready:  Block<void>
{
    runner[
        distant_engine=cicd_distant,
        cicd_engine=cicd_distribution,
        logger=logger
    ](
        name=name,
        cpu=1,
        memory=500,
        storage=1300,
        volumes=[|volume("compilation-result", 1000)],
        containers=[|container("rust", rust_memory, 2, rust_storage, on, [|mount("compilation-result", "/mounted/result")], "rust:bullseye", _)],
        stop_on_failure=false
    )
    Self.trigger -> runner.trigger,ready -> Self.ready
}
