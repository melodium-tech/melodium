
use core/engine::Engine
use core/engine::Stdin
use core/engine::Ready as EngineReady
use core/engine::Read as EngineRead
use core/engine::Write as EngineWrite
use core/engine::Close as EngineClose
use core/engine::End as EngineEnd

/**
Trigger when Mélodium is ready to work.

`trigger` is send as soon as process is ready to work.
This sequence is useful to start processing from the beginning of the program.
*/
sequence Ready()
    model engine: Engine()
    output ready: Block<void>
{
    EngineReady[engine=engine]()

    EngineReady.ready -> Self.ready
}

/**
Read process standard input.

Stream the lines received as input on stdin.

⚠️ When using `Read()` user may have to call `Close()` at some point,
because unless program is explicitly ended or standard input stream closed
by connected process, listening on stream will continue indefinitely.
*/
sequence Read()
    model stdin: Stdin()
    output line: Stream<string>
{
    EngineRead[stdin=stdin]()

    EngineRead.line -> Self.line
}

/**
Write process standard output.

Send the received text to stdout.
*/
sequence Write()
    input text: Stream<string>
{
    EngineWrite()

    Self.text -> EngineWrite.text
}

/**
Closes the process standard input.

ℹ️ This does not end program execution, see `End()` sequence for that.
*/
sequence Close()
    model stdin: Stdin()
    input close: Block<void>
{
    EngineClose[stdin=stdin]()

    Self.close -> EngineClose.close
}

/**
Ends up the program.

Tells Mélodium to finish everything then exit.
*/
sequence End()
    model engine: Engine()
    input end:    Block<void>
{
    EngineEnd[engine=engine]()

    Self.end -> EngineEnd.end
}


