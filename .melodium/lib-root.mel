use cicd/runners::CicdDispatchEngine
use cicd/runners::stopRunner
use cicd/steps::stepOn
use fs/local::writeLocal
use log/logger::Logger
use log/logger::logs
use log/logger::stop
use log/console::console
use std/flow/concentrate::Concentrator
use std/flow/concentrate::concentrateBlock
use std/flow/concentrate::concentrated
use std/flow::trigger
use std/text/compose::|format
use std/data/string_map::|entry
use std/data/string_map::|map
use std/engine/util::startup
use std/ops/vec::|contains
use work/resources::|container
use work/resources/arch::|arm64
use work/resources/arch::|amd64
use work/resources::|volume
use work/resources::|mount
use process/command::|command
use process/command::|raw_command
use process/command::|raw_commands
use root/build::buildMelodium
use root/tests::tests
use root/logging::writeLogs

treatment main(const key: string, out_directory: string, repository_url: string, ci_token: string, project: string, sha: string, test: bool = false, ref: string = "", pipeline: string = "", on_github: bool = false, on_gitlab: bool = false)
  model logger: Logger(autoclose=true)
  model cicd: CicdDispatchEngine(key=key)
{
    startup()

    allLogs: logs[logger=logger]()
    //stopLogs: stop[logger=logger]()
    logConsole: console(timestamp=true)
    writeLogs(out_directory=out_directory)
    allLogs.all -> logConsole.logs
    allLogs.all -> writeLogs.logs

    builds[cicd=cicd, logger=logger](targets=[
      "x86_64-unknown-linux-gnu",
      "x86_64-unknown-linux-musl",
      "aarch64-unknown-linux-gnu",
      "aarch64-unknown-linux-musl",
      "i686-unknown-linux-gnu",
      "i686-unknown-linux-musl",
      //"wasm32-unknown-unknown",
      "x86_64-apple-darwin",
      "aarch64-apple-darwin",
      "x86_64-pc-windows-gnu",
      "x86_64-pc-windows-msvc",
      "i686-pc-windows-gnu",
      "i686-pc-windows-msvc",
      "aarch64-pc-windows-msvc"
    ],
      repository_url=repository_url, gitlab_token=ci_token, project=project, sha=sha, ref=ref, test=test, pipeline=pipeline, on_github=on_github, on_gitlab=on_gitlab
    )
    writeBinaries(out_directory=out_directory)
    tests[cicd=cicd, logger=logger](targets=[
      "x86_64-unknown-linux-gnu",
      "x86_64-unknown-linux-musl",
      "aarch64-unknown-linux-gnu",
      "aarch64-unknown-linux-musl",
      "i686-unknown-linux-gnu",
      "i686-unknown-linux-musl"
    ],
      report_service_token=ci_token, project=project, sha=sha, ref=ref, test=test, pipeline=pipeline, on_github=on_github, on_gitlab=on_gitlab
    )

    startup.trigger -> builds.trigger
    startup.trigger -> tests.trigger
    startup.trigger -> writeBinaries.trigger

    builds.binReleaseX86_64UnknownLinuxGnu -> writeBinaries.binReleaseX86_64UnknownLinuxGnu
    builds.binReleaseX86_64UnknownLinuxMusl -> writeBinaries.binReleaseX86_64UnknownLinuxMusl
    builds.binReleaseAarch64UnknownLinuxGnu -> writeBinaries.binReleaseAarch64UnknownLinuxGnu
    builds.binReleaseAarch64UnknownLinuxMusl -> writeBinaries.binReleaseAarch64UnknownLinuxMusl
    builds.binReleaseI686UnknownLinuxGnu -> writeBinaries.binReleaseI686UnknownLinuxGnu
    builds.binReleaseI686UnknownLinuxMusl -> writeBinaries.binReleaseI686UnknownLinuxMusl
    builds.binReleaseWasm32UnknownUnknown -> writeBinaries.binReleaseWasm32UnknownUnknown
    builds.binReleaseX86_64AppleDarwin -> writeBinaries.binReleaseX86_64AppleDarwin
    builds.binReleaseAarch64AppleDarwin -> writeBinaries.binReleaseAarch64AppleDarwin
    builds.binReleaseX86_64PcWindowsGnu -> writeBinaries.binReleaseX86_64PcWindowsGnu
    builds.binReleaseX86_64PcWindowsMsvc -> writeBinaries.binReleaseX86_64PcWindowsMsvc
    builds.binReleaseI686PcWindowsGnu -> writeBinaries.binReleaseI686PcWindowsGnu
    builds.binReleaseI686PcWindowsMsvc -> writeBinaries.binReleaseI686PcWindowsMsvc
    builds.binReleaseAarch64PcWindowsMsvc -> writeBinaries.binReleaseAarch64PcWindowsMsvc

    builds.binReleaseX86_64UnknownLinuxGnu -> tests.binReleaseX86_64UnknownLinuxGnu
    builds.binReleaseX86_64UnknownLinuxMusl -> tests.binReleaseX86_64UnknownLinuxMusl
    builds.binReleaseAarch64UnknownLinuxGnu -> tests.binReleaseAarch64UnknownLinuxGnu
    builds.binReleaseAarch64UnknownLinuxMusl -> tests.binReleaseAarch64UnknownLinuxMusl
    builds.binReleaseI686UnknownLinuxGnu -> tests.binReleaseI686UnknownLinuxGnu
    builds.binReleaseI686UnknownLinuxMusl -> tests.binReleaseI686UnknownLinuxMusl
    builds.binReleaseWasm32UnknownUnknown -> tests.binReleaseWasm32UnknownUnknown
    builds.binReleaseX86_64AppleDarwin -> tests.binReleaseX86_64AppleDarwin
    builds.binReleaseAarch64AppleDarwin -> tests.binReleaseAarch64AppleDarwin
    builds.binReleaseX86_64PcWindowsGnu -> tests.binReleaseX86_64PcWindowsGnu
    builds.binReleaseX86_64PcWindowsMsvc -> tests.binReleaseX86_64PcWindowsMsvc
    builds.binReleaseI686PcWindowsGnu -> tests.binReleaseI686PcWindowsGnu
    builds.binReleaseI686PcWindowsMsvc -> tests.binReleaseI686PcWindowsMsvc
    builds.binReleaseAarch64PcWindowsMsvc -> tests.binReleaseAarch64PcWindowsMsvc
    builds.binTestersX86_64UnknownLinuxGnu -> tests.binTestersX86_64UnknownLinuxGnu
    builds.binTestersX86_64UnknownLinuxMusl -> tests.binTestersX86_64UnknownLinuxMusl
    builds.binTestersAarch64UnknownLinuxGnu -> tests.binTestersAarch64UnknownLinuxGnu
    builds.binTestersAarch64UnknownLinuxMusl -> tests.binTestersAarch64UnknownLinuxMusl
    builds.binTestersI686UnknownLinuxGnu -> tests.binTestersI686UnknownLinuxGnu
    builds.binTestersI686UnknownLinuxMusl -> tests.binTestersI686UnknownLinuxMusl
    builds.binTestersWasm32UnknownUnknown -> tests.binTestersWasm32UnknownUnknown
    builds.binTestersX86_64AppleDarwin -> tests.binTestersX86_64AppleDarwin
    builds.binTestersAarch64AppleDarwin -> tests.binTestersAarch64AppleDarwin
    builds.binTestersX86_64PcWindowsGnu -> tests.binTestersX86_64PcWindowsGnu
    builds.binTestersX86_64PcWindowsMsvc -> tests.binTestersX86_64PcWindowsMsvc
    builds.binTestersI686PcWindowsGnu -> tests.binTestersI686PcWindowsGnu
    builds.binTestersI686PcWindowsMsvc -> tests.binTestersI686PcWindowsMsvc
    builds.binTestersAarch64PcWindowsMsvc -> tests.binTestersAarch64PcWindowsMsvc

    //writeBinaries.allFinished -> stopLogs.trigger
}

treatment writeBinaries(out_directory: string)
  model concentrator: Concentrator()
  input trigger: Block<void>
  input binReleaseX86_64UnknownLinuxGnu: Stream<byte>
  input binReleaseX86_64UnknownLinuxMusl: Stream<byte>
  input binReleaseAarch64UnknownLinuxGnu: Stream<byte>
  input binReleaseAarch64UnknownLinuxMusl: Stream<byte>
  input binReleaseI686UnknownLinuxGnu: Stream<byte>
  input binReleaseI686UnknownLinuxMusl: Stream<byte>
  input binReleaseWasm32UnknownUnknown: Stream<byte>
  input binReleaseX86_64AppleDarwin: Stream<byte>
  input binReleaseAarch64AppleDarwin: Stream<byte>
  input binReleaseX86_64PcWindowsGnu: Stream<byte>
  input binReleaseX86_64PcWindowsMsvc: Stream<byte>
  input binReleaseI686PcWindowsGnu: Stream<byte>
  input binReleaseI686PcWindowsMsvc: Stream<byte>
  input binReleaseAarch64PcWindowsMsvc: Stream<byte>
  output allFinished: Block<void>
{
    writeX86_64UnknownLinuxGnu: writeLocal(path=|format("{dir}/melodium/x86_64-unknown-linux-gnu/melodium", |entry("dir", out_directory)))
    writeX86_64UnknownLinuxMusl: writeLocal(path=|format("{dir}/melodium/x86_64-unknown-linux-musl/melodium", |entry("dir", out_directory)))
    writeAarch64UnknownLinuxGnu: writeLocal(path=|format("{dir}/melodium/aarch64-unknown-linux-gnu/melodium", |entry("dir", out_directory)))
    writeAarch64UnknownLinuxMusl: writeLocal(path=|format("{dir}/melodium/aarch64-unknown-linux-musl/melodium", |entry("dir", out_directory)))
    writeI686UnknownLinuxGnu: writeLocal(path=|format("{dir}/melodium/i686-unknown-linux-gnu/melodium", |entry("dir", out_directory)))
    writeI686UnknownLinuxMusl: writeLocal(path=|format("{dir}/melodium/i686-unknown-linux-musl/melodium", |entry("dir", out_directory)))
    writeWasm32UnknownUnknown: writeLocal(path=|format("{dir}/melodium/wasm32-unknown-unknown/melodium", |entry("dir", out_directory)))
    writeX86_64AppleDarwin: writeLocal(path=|format("{dir}/melodium/x86_64-apple-darwin/melodium", |entry("dir", out_directory)))
    writeAarch64AppleDarwin: writeLocal(path=|format("{dir}/melodium/aarch64-apple-darwin/melodium", |entry("dir", out_directory)))
    writeX86_64PcWindowsGnu: writeLocal(path=|format("{dir}/melodium/x86_64-pc-windows-gnu/melodium.exe", |entry("dir", out_directory)))
    writeX86_64PcWindowsMsvc: writeLocal(path=|format("{dir}/melodium/x86_64-pc-windows-msvc/melodium.exe", |entry("dir", out_directory)))
    writeI686PcWindowsGnu: writeLocal(path=|format("{dir}/melodium/i686-pc-windows-gnu/melodium.exe", |entry("dir", out_directory)))
    writeI686PcWindowsMsvc: writeLocal(path=|format("{dir}/melodium/i686-pc-windows-msvc/melodium.exe", |entry("dir", out_directory)))
    writeAarch64PcWindowsMsvc: writeLocal(path=|format("{dir}/melodium/aarch64-pc-windows-msvc/melodium.exe", |entry("dir", out_directory)))

    concentrateX86_64UnknownLinuxGnu: concentrateBlock<void>[concentrator=concentrator]()
    concentrateX86_64UnknownLinuxMusl: concentrateBlock<void>[concentrator=concentrator]()
    concentrateAarch64UnknownLinuxGnu: concentrateBlock<void>[concentrator=concentrator]()
    concentrateAarch64UnknownLinuxMusl: concentrateBlock<void>[concentrator=concentrator]()
    concentrateI686UnknownLinuxGnu: concentrateBlock<void>[concentrator=concentrator]()
    concentrateI686UnknownLinuxMusl: concentrateBlock<void>[concentrator=concentrator]()
    concentrateWasm32UnknownUnknown: concentrateBlock<void>[concentrator=concentrator]()
    concentrateX86_64AppleDarwin: concentrateBlock<void>[concentrator=concentrator]()
    concentrateAarch64AppleDarwin: concentrateBlock<void>[concentrator=concentrator]()
    concentrateX86_64PcWindowsGnu: concentrateBlock<void>[concentrator=concentrator]()
    concentrateX86_64PcWindowsMsvc: concentrateBlock<void>[concentrator=concentrator]()
    concentrateI686PcWindowsGnu: concentrateBlock<void>[concentrator=concentrator]()
    concentrateI686PcWindowsMsvc: concentrateBlock<void>[concentrator=concentrator]()
    concentrateAarch64PcWindowsMsvc: concentrateBlock<void>[concentrator=concentrator]()

    Self.binReleaseX86_64UnknownLinuxGnu -> writeX86_64UnknownLinuxGnu.data,finished -> concentrateX86_64UnknownLinuxGnu.data
    Self.binReleaseX86_64UnknownLinuxMusl -> writeX86_64UnknownLinuxMusl.data,finished -> concentrateX86_64UnknownLinuxMusl.data
    Self.binReleaseAarch64UnknownLinuxGnu -> writeAarch64UnknownLinuxGnu.data,finished -> concentrateAarch64UnknownLinuxGnu.data
    Self.binReleaseAarch64UnknownLinuxMusl -> writeAarch64UnknownLinuxMusl.data,finished -> concentrateAarch64UnknownLinuxMusl.data
    Self.binReleaseI686UnknownLinuxGnu -> writeI686UnknownLinuxGnu.data,finished -> concentrateI686UnknownLinuxGnu.data
    Self.binReleaseI686UnknownLinuxMusl -> writeI686UnknownLinuxMusl.data,finished -> concentrateI686UnknownLinuxMusl.data
    Self.binReleaseWasm32UnknownUnknown -> writeWasm32UnknownUnknown.data,finished -> concentrateWasm32UnknownUnknown.data
    Self.binReleaseX86_64AppleDarwin -> writeX86_64AppleDarwin.data,finished -> concentrateX86_64AppleDarwin.data
    Self.binReleaseAarch64AppleDarwin -> writeAarch64AppleDarwin.data,finished -> concentrateAarch64AppleDarwin.data
    Self.binReleaseX86_64PcWindowsGnu -> writeX86_64PcWindowsGnu.data,finished -> concentrateX86_64PcWindowsGnu.data
    Self.binReleaseX86_64PcWindowsMsvc -> writeX86_64PcWindowsMsvc.data,finished -> concentrateX86_64PcWindowsMsvc.data
    Self.binReleaseI686PcWindowsGnu -> writeI686PcWindowsGnu.data,finished -> concentrateI686PcWindowsGnu.data
    Self.binReleaseI686PcWindowsMsvc -> writeI686PcWindowsMsvc.data,finished -> concentrateI686PcWindowsMsvc.data
    Self.binReleaseAarch64PcWindowsMsvc -> writeAarch64PcWindowsMsvc.data,finished -> concentrateAarch64PcWindowsMsvc.data

    concentrated<void>[concentrator=concentrator]()
    trigger<void>()
    Self.trigger -> concentrated.trigger,data -> trigger.stream,end -> Self.allFinished
}

treatment builds[logger: Logger, cicd: CicdDispatchEngine](targets: Vec<string>, repository_url: string, gitlab_token: string, project: string, sha: string, ref: string, pipeline: string, test: bool, on_github: bool = false, on_gitlab: bool = false)
  input trigger: Block<void>
  output binReleaseX86_64UnknownLinuxGnu: Stream<byte>
  output binReleaseX86_64UnknownLinuxMusl: Stream<byte>
  output binReleaseAarch64UnknownLinuxGnu: Stream<byte>
  output binReleaseAarch64UnknownLinuxMusl: Stream<byte>
  output binReleaseI686UnknownLinuxGnu: Stream<byte>
  output binReleaseI686UnknownLinuxMusl: Stream<byte>
  output binReleaseWasm32UnknownUnknown: Stream<byte>
  output binReleaseX86_64AppleDarwin: Stream<byte>
  output binReleaseAarch64AppleDarwin: Stream<byte>
  output binReleaseX86_64PcWindowsGnu: Stream<byte>
  output binReleaseX86_64PcWindowsMsvc: Stream<byte>
  output binReleaseI686PcWindowsGnu: Stream<byte>
  output binReleaseI686PcWindowsMsvc: Stream<byte>
  output binReleaseAarch64PcWindowsMsvc: Stream<byte>
  output binTestersX86_64UnknownLinuxGnu: Stream<byte>
  output binTestersX86_64UnknownLinuxMusl: Stream<byte>
  output binTestersAarch64UnknownLinuxGnu: Stream<byte>
  output binTestersAarch64UnknownLinuxMusl: Stream<byte>
  output binTestersI686UnknownLinuxGnu: Stream<byte>
  output binTestersI686UnknownLinuxMusl: Stream<byte>
  output binTestersWasm32UnknownUnknown: Stream<byte>
  output binTestersX86_64AppleDarwin: Stream<byte>
  output binTestersAarch64AppleDarwin: Stream<byte>
  output binTestersX86_64PcWindowsGnu: Stream<byte>
  output binTestersX86_64PcWindowsMsvc: Stream<byte>
  output binTestersI686PcWindowsGnu: Stream<byte>
  output binTestersI686PcWindowsMsvc: Stream<byte>
  output binTestersAarch64PcWindowsMsvc: Stream<byte>
{
    releaseX86_64UnknownLinuxGnu: buildMelodium[cicd=cicd, logger=logger]
      (
        build=|contains<string>(targets, "x86_64-unknown-linux-gnu"),
        target="x86_64-unknown-linux-gnu",
        release=true,
        build_testers=test,
        on=|amd64(),
        environment_variables=|map([]),
        repository_url=repository_url, gitlab_token=gitlab_token, project=project, sha=sha, ref=ref, pipeline=pipeline, on_github=on_github, on_gitlab=on_gitlab
      )
    Self.trigger -> releaseX86_64UnknownLinuxGnu.trigger,binary -> Self.binReleaseX86_64UnknownLinuxGnu
                    releaseX86_64UnknownLinuxGnu.testers --------> Self.binTestersX86_64UnknownLinuxGnu
    
    releaseX86_64UnknownLinuxMusl: buildMelodium[cicd=cicd, logger=logger]
      (
        build=|contains<string>(targets, "x86_64-unknown-linux-musl"),
        target="x86_64-unknown-linux-musl",
        release=true,
        build_testers=test,
        on=|amd64(), 
        environment_variables=|map([]),
        pre_commands=|raw_commands([
          "apt-get update",
          "apt-get install -y musl-tools",
          "rustup target add x86_64-unknown-linux-musl"
        ]),
        repository_url=repository_url, gitlab_token=gitlab_token, project=project, sha=sha, ref=ref, pipeline=pipeline, on_github=on_github, on_gitlab=on_gitlab
      )
    Self.trigger -> releaseX86_64UnknownLinuxMusl.trigger,binary -> Self.binReleaseX86_64UnknownLinuxMusl
                    releaseX86_64UnknownLinuxMusl.testers --------> Self.binTestersX86_64UnknownLinuxMusl
    

    releaseI686UnknownLinuxGnu: buildMelodium[cicd=cicd, logger=logger]
      (
        build=|contains<string>(targets, "i686-unknown-linux-gnu"),
        target="i686-unknown-linux-gnu",
        release=true,
        build_testers=test,
        on=|amd64(), 
        environment_variables=|map([
          |entry("PATH", "${CARGO_HOME}/bin:${PATH}"),
          |entry("PKG_CONFIG", "/usr/bin/i686-linux-gnu-pkg-config")
        ]),
        pre_commands=|raw_commands([
          "dpkg --add-architecture i386",
          "apt-get update",
          "apt-get install -y gcc-multilib",
          "rustup target add i686-unknown-linux-gnu"
        ]),
        repository_url=repository_url, gitlab_token=gitlab_token, project=project, sha=sha, ref=ref, pipeline=pipeline, on_github=on_github, on_gitlab=on_gitlab
      )
    Self.trigger -> releaseI686UnknownLinuxGnu.trigger,binary -> Self.binReleaseI686UnknownLinuxGnu
                    releaseI686UnknownLinuxGnu.testers --------> Self.binTestersI686UnknownLinuxGnu
    
    releaseI686UnknownLinuxMusl: buildMelodium[cicd=cicd, logger=logger]
      (
        build=|contains<string>(targets, "i686-unknown-linux-musl"),
        target="i686-unknown-linux-musl",
        release=true,
        build_testers=test,
        on=|amd64(), 
        environment_variables=|map([
          |entry("PATH", "${CARGO_HOME}/bin:${PATH}"),
          |entry("PKG_CONFIG", "/usr/bin/i686-linux-gnu-pkg-config"),
          |entry("CARGO_TARGET_I686_UNKNOWN_LINUX_MUSL_LINKER", "/usr/local/i686-linux-musl-cross/bin/i686-linux-musl-ld"),
          |entry("CARGO_TARGET_I686_UNKNOWN_LINUX_MUSL_AR", "/usr/local/i686-linux-musl-cross/bin/i686-linux-musl-ar"),
          |entry("TARGET_CC", "/usr/local/i686-linux-musl-cross/bin/i686-linux-musl-gcc"),
          |entry("TARGET_AR", "/usr/local/i686-linux-musl-cross/bin/i686-linux-musl-gcc-ar")
        ]),
        pre_commands=|raw_commands([
          "dpkg --add-architecture i386",
          "apt-get update",
          "apt-get install -y gcc-multilib",
          "wget https://repo.melodium.tech/tooling/musl/i686-linux-musl-cross.tar.gz",
          "tar --extract --gzip --file i686-linux-musl-cross.tar.gz --directory /usr/local",
          "ln -s /usr/local/i686-linux-musl-cross/i686-linux-musl/lib/libgcc_s.so.1 /usr/local/i686-linux-musl-cross/i686-linux-musl/lib/libgcc.so",
          "rustup target add i686-unknown-linux-musl"
        ]),
        repository_url=repository_url, gitlab_token=gitlab_token, project=project, sha=sha, ref=ref, pipeline=pipeline, on_github=on_github, on_gitlab=on_gitlab
      )
    Self.trigger -> releaseI686UnknownLinuxMusl.trigger,binary -> Self.binReleaseI686UnknownLinuxMusl
                    releaseI686UnknownLinuxMusl.testers --------> Self.binTestersI686UnknownLinuxMusl

    releaseAarch64UnknownLinuxGnu: buildMelodium[cicd=cicd, logger=logger]
      (
        build=|contains<string>(targets, "aarch64-unknown-linux-gnu"),
        target="aarch64-unknown-linux-gnu",
        release=true,
        build_testers=test,
        on=|arm64(), 
        environment_variables=|map([
          |entry("PATH", "${CARGO_HOME}/bin:${PATH}")
        ]),
        pre_commands=|raw_commands([
          "apt-get update",
          "apt-get install -y binutils-aarch64-linux-gnu libgcc1-arm64-cross gcc-aarch64-linux-gnu libc-dev"
        ]),
        repository_url=repository_url, gitlab_token=gitlab_token, project=project, sha=sha, ref=ref, pipeline=pipeline, on_github=on_github, on_gitlab=on_gitlab
      )
    Self.trigger -> releaseAarch64UnknownLinuxGnu.trigger,binary -> Self.binReleaseAarch64UnknownLinuxGnu
                    releaseAarch64UnknownLinuxGnu.testers --------> Self.binTestersAarch64UnknownLinuxGnu
    
    releaseAarch64UnknownLinuxMusl: buildMelodium[cicd=cicd, logger=logger]
      (
        build=|contains<string>(targets, "aarch64-unknown-linux-musl"),
        target="aarch64-unknown-linux-musl",
        release=true,
        build_testers=test,
        on=|amd64(), 
        environment_variables=|map([
          |entry("PATH", "${CARGO_HOME}/bin:${PATH}"),
          |entry("PKG_CONFIG", "/usr/bin/aarch64-linux-gnu-pkg-config"),
          |entry("CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER", "/usr/local/aarch64-linux-musl-cross/bin/aarch64-linux-musl-ld"),
          |entry("CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_AR", "/usr/local/aarch64-linux-musl-cross/bin/aarch64-linux-musl-ar"),
          |entry("LD_LIBRARY_PATH", "/usr/local/aarch64-linux-musl-cross/aarch64-linux-musl/lib/:${LD_LIBRARY_PATH}"),
          |entry("TARGET_CC", "/usr/local/aarch64-linux-musl-cross/bin/aarch64-linux-musl-gcc"),
          |entry("TARGET_AR", "/usr/local/aarch64-linux-musl-cross/bin/aarch64-linux-musl-gcc-ar")
        ]),
        pre_commands=|raw_commands([
          "dpkg --add-architecture arm64",
          "apt-get update",
          "apt-get install -y gcc-multilib binutils-aarch64-linux-gnu libgcc1-arm64-cross musl-tools libc-dev:arm64",
          "wget https://repo.melodium.tech/tooling/musl/aarch64-linux-musl-cross.tar.gz",
          "tar --extract --gzip --file aarch64-linux-musl-cross.tar.gz --directory /usr/local",
          "ln -s /usr/local/aarch64-linux-musl-cross/aarch64-linux-musl/lib/libgcc_s.so.1 /usr/local/aarch64-linux-musl-cross/aarch64-linux-musl/lib/libgcc.so",
          "rustup target add aarch64-unknown-linux-musl"
        ]),
        repository_url=repository_url, gitlab_token=gitlab_token, project=project, sha=sha, ref=ref, pipeline=pipeline, on_github=on_github, on_gitlab=on_gitlab
      )
    Self.trigger -> releaseAarch64UnknownLinuxMusl.trigger,binary -> Self.binReleaseAarch64UnknownLinuxMusl
                    releaseAarch64UnknownLinuxMusl.testers --------> Self.binTestersAarch64UnknownLinuxMusl
    
    releaseWasm32UnknownUnknown: buildMelodium[cicd=cicd, logger=logger]
      (
        build=|contains<string>(targets, "wasm32-unknown-unknown"),
        target="wasm32-unknown-unknown",
        release=true,
        build_testers=test,
        on=|amd64(), 
        environment_variables=|map([]),
        pre_commands=|raw_commands([
          "rustup target add wasm32-unknown-unknown"
        ]),
        repository_url=repository_url, gitlab_token=gitlab_token, project=project, sha=sha, ref=ref, pipeline=pipeline, on_github=on_github, on_gitlab=on_gitlab
      )
    Self.trigger -> releaseWasm32UnknownUnknown.trigger,binary -> Self.binReleaseWasm32UnknownUnknown
                    releaseWasm32UnknownUnknown.testers --------> Self.binTestersWasm32UnknownUnknown
    
    releaseX86_64AppleDarwin: buildMelodium[cicd=cicd, logger=logger]
      (
        build=|contains<string>(targets, "x86_64-apple-darwin"),
        target="x86_64-apple-darwin",
        release=true,
        build_testers=test,
        on=|amd64(), 
        rust_memory=6000,
        rust_storage=25000,
        environment_variables=|map([
          |entry("PATH", "${CARGO_HOME}/bin:/osxcross/target/bin:${PATH}"),
          |entry("CARGO_TARGET_X86_64_APPLE_DARWIN_LINKER", "x86_64-apple-darwin16-clang"),
          |entry("CARGO_TARGET_X86_64_APPLE_DARWIN_AR", "x86_64-apple-darwin16-ar"),
          |entry("TARGET_CC", "x86_64-apple-darwin16-cc"),
          |entry("TARGET_AR", "x86_64-apple-darwin16-ar")
        ]),
        pre_commands=[
          |command("apt-get", ["update"]),
          |command("apt-get", ["install", "-y", "clang", "gcc", "g++", "cmake", "zlib1g-dev", "libmpc-dev", "libmpfr-dev", "libgmp-dev"]),
          |command("rustup", ["target", "add", "x86_64-apple-darwin"]),
          |command("bash", ["-c", "
            if [ ! -d /osxcross ]
            then
              base=\"$PWD\"
              cd /
              wget --no-clobber https://repo.melodium.tech/tooling/osxcross/osxcross-611675b.tar.gz
              tar --extract --gzip --file osxcross-611675b.tar.gz
              mv osxcross-master osxcross
              cd osxcross
              wget --no-clobber https://repo.melodium.tech/tooling/osxcross/MacOSX10.12.sdk.tar.xz
              mv MacOSX10.12.sdk.tar.xz tarballs/
              UNATTENDED=yes OSX_VERSION_MIN=10.12 ./build.sh
              ln -s \"/osxcross/target/bin/x86_64-apple-darwin16-strip\" \"/osxcross/target/bin/strip\"
              cd \"$base\"
            fi"])
        ],
        repository_url=repository_url, gitlab_token=gitlab_token, project=project, sha=sha, ref=ref, pipeline=pipeline, on_github=on_github, on_gitlab=on_gitlab
      )
    Self.trigger -> releaseX86_64AppleDarwin.trigger,binary -> Self.binReleaseX86_64AppleDarwin
                    releaseX86_64AppleDarwin.testers --------> Self.binTestersX86_64AppleDarwin
    
    releaseAarch64AppleDarwin: buildMelodium[cicd=cicd, logger=logger]
      (
        build=|contains<string>(targets, "aarch64-apple-darwin"),
        target="aarch64-apple-darwin",
        release=true,
        build_testers=test,
        on=|amd64(),
        rust_memory=6000,
        rust_storage=25000,
        environment_variables=|map([
          |entry("PATH", "${CARGO_HOME}/bin:/osxcross/target/bin:${PATH}"),
          |entry("CARGO_TARGET_AARCH64_APPLE_DARWIN_LINKER", "aarch64-apple-darwin20.4-clang"),
          |entry("CARGO_TARGET_AARCH64_APPLE_DARWIN_AR", "aarch64-apple-darwin20.4-ar"),
          |entry("TARGET_CC", "aarch64-apple-darwin20.4-cc"),
          |entry("TARGET_AR", "aarch64-apple-darwin20.4-ar")
        ]),
        pre_commands=[
          |command("apt-get", ["update"]),
          |command("apt-get", ["install", "-y", "clang", "gcc", "g++", "cmake", "zlib1g-dev", "libmpc-dev", "libmpfr-dev", "libgmp-dev"]),
          |command("rustup", ["target", "add", "aarch64-apple-darwin"]),
          |command("bash", ["-c", "
            if [ ! -d /osxcross ]
            then
              base=\"$PWD\"
              cd /
              wget --no-clobber https://repo.melodium.tech/tooling/osxcross/osxcross-611675b.tar.gz
              tar --extract --gzip --file osxcross-611675b.tar.gz
              mv osxcross-master osxcross
              cd osxcross
              wget --no-clobber https://repo.melodium.tech/tooling/osxcross/MacOSX11.3.sdk.tar.xz
              mv MacOSX11.3.sdk.tar.xz tarballs/
              UNATTENDED=yes OSX_VERSION_MIN=11.3 ./build.sh
              ln -s \"/osxcross/target/bin/aarch64-apple-darwin20.4-strip\" \"/osxcross/target/bin/strip\"
              cd \"$base\"
            fi"])
        ],
        repository_url=repository_url, gitlab_token=gitlab_token, project=project, sha=sha, ref=ref, pipeline=pipeline, on_github=on_github, on_gitlab=on_gitlab
      )
    Self.trigger -> releaseAarch64AppleDarwin.trigger,binary -> Self.binReleaseAarch64AppleDarwin
                    releaseAarch64AppleDarwin.testers --------> Self.binTestersAarch64AppleDarwin
    
    releaseX86_64PcWindowsGnu: buildMelodium[cicd=cicd, logger=logger]
      (
        build=|contains<string>(targets, "x86_64-pc-windows-gnu"),
        target="x86_64-pc-windows-gnu",
        release=true,
        build_testers=test,
        on=|amd64(),
        rust_storage=15000,
        environment_variables=|map([]),
        pre_commands=|raw_commands([
          "apt-get update",
          "apt-get install -y mingw-w64",
          "rustup target add x86_64-pc-windows-gnu"
        ]),
        repository_url=repository_url, gitlab_token=gitlab_token, project=project, sha=sha, ref=ref, pipeline=pipeline, on_github=on_github, on_gitlab=on_gitlab
      )
    Self.trigger -> releaseX86_64PcWindowsGnu.trigger,binary -> Self.binReleaseX86_64PcWindowsGnu
                    releaseX86_64PcWindowsGnu.testers --------> Self.binTestersX86_64PcWindowsGnu
    
    releaseX86_64PcWindowsMsvc: buildMelodium[cicd=cicd, logger=logger]
      (
        build=|contains<string>(targets, "x86_64-pc-windows-msvc"),
        target="x86_64-pc-windows-msvc",
        release=true,
        build_testers=test,
        on=|amd64(),
        rust_storage=15000,
        environment_variables=|map([
          |entry("PATH", "${CARGO_HOME}/bin:${PATH}"),
          |entry("CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_RUSTFLAGS", "-Ctarget-feature=+crt-static -Lnative=/.xwin/crt/lib/x86_64 -Lnative=/.xwin/sdk/lib/um/x86_64 -Lnative=/.xwin/sdk/lib/ucrt/x86_64"),
          |entry("CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_LINKER", "lld")
        ]),
        pre_commands=[
          |command("apt-get", ["update"]),
          |command("apt-get", ["install", "-y", "lld"]),
          |command("rustup", ["target", "add", "x86_64-pc-windows-msvc"]),
          |command("bash", ["-c", "
            if [ ! -f .cargo/bin/xwin ]
            then
              cargo install xwin --locked
              xwin --accept-license --log-level info --manifest-version 16 --arch x86_64 --cache-dir /.xwin-cache splat --output /.xwin
            fi"])
        ],
        repository_url=repository_url, gitlab_token=gitlab_token, project=project, sha=sha, ref=ref, pipeline=pipeline, on_github=on_github, on_gitlab=on_gitlab
      )
    Self.trigger -> releaseX86_64PcWindowsMsvc.trigger,binary -> Self.binReleaseX86_64PcWindowsMsvc
                    releaseX86_64PcWindowsMsvc.testers --------> Self.binTestersX86_64PcWindowsMsvc
    
    releaseI686PcWindowsGnu: buildMelodium[cicd=cicd, logger=logger]
      (
        build=|contains<string>(targets, "i686-pc-windows-gnu"),
        target="i686-pc-windows-gnu",
        release=true,
        build_testers=test,
        on=|amd64(),
        rust_storage=15000,
        environment_variables=|map([
          |entry("PATH", "${CARGO_HOME}/bin:${PATH}")
        ]),
        pre_commands=|raw_commands([
          "apt-get update",
          "apt-get install -y mingw-w64",
          "rustup target add i686-pc-windows-gnu"
        ]),
        repository_url=repository_url, gitlab_token=gitlab_token, project=project, sha=sha, ref=ref, pipeline=pipeline, on_github=on_github, on_gitlab=on_gitlab
      )
    Self.trigger -> releaseI686PcWindowsGnu.trigger,binary -> Self.binReleaseI686PcWindowsGnu
                    releaseI686PcWindowsGnu.testers --------> Self.binTestersI686PcWindowsGnu
    
    releaseI686PcWindowsMsvc: buildMelodium[cicd=cicd, logger=logger]
      (
        build=|contains<string>(targets, "i686-pc-windows-msvc"),
        target="i686-pc-windows-msvc",
        release=true,
        build_testers=test,
        on=|amd64(),
        rust_storage=15000,
        environment_variables=|map([
          |entry("PATH", "${CARGO_HOME}/bin:${PATH}"),
          |entry("CARGO_TARGET_I686_PC_WINDOWS_MSVC_RUSTFLAGS", "-Ctarget-feature=+crt-static -Lnative=/.xwin/crt/lib/x86 -Lnative=/.xwin/sdk/lib/um/x86 -Lnative=/.xwin/sdk/lib/ucrt/x86"),
          |entry("CARGO_TARGET_I686_PC_WINDOWS_MSVC_LINKER", "lld")
        ]),
        pre_commands=[
          |command("apt-get", ["update"]),
          |command("apt-get", ["install", "-y", "lld"]),
          |command("rustup", ["target", "add", "i686-pc-windows-msvc"]),
          |command("bash", ["-c", "
            if [ ! -f .cargo/bin/xwin ]
            then
              cargo install xwin --locked
              xwin --accept-license --log-level info --manifest-version 16 --arch x86 --cache-dir /.xwin-cache splat --output /.xwin
            fi"])
        ],
        repository_url=repository_url, gitlab_token=gitlab_token, project=project, sha=sha, ref=ref, pipeline=pipeline, on_github=on_github, on_gitlab=on_gitlab
      )
    Self.trigger -> releaseI686PcWindowsMsvc.trigger,binary -> Self.binReleaseI686PcWindowsMsvc
                    releaseI686PcWindowsMsvc.testers --------> Self.binTestersI686PcWindowsMsvc
    
    releaseAarch64PcWindowsMsvc: buildMelodium[cicd=cicd, logger=logger]
      (
        build=|contains<string>(targets, "aarch64-pc-windows-msvc"),
        target="aarch64-pc-windows-msvc",
        release=true,
        build_testers=test,
        on=|amd64(), 
        rust_storage=15000,
        environment_variables=|map([
          |entry("PATH", "${CARGO_HOME}/bin:${PATH}"),
          |entry("CARGO_TARGET_AARCH64_PC_WINDOWS_MSVC_RUSTFLAGS", "-Ctarget-feature=+crt-static -Lnative=/.xwin/crt/lib/aarch64 -Lnative=/.xwin/sdk/lib/um/aarch64 -Lnative=/.xwin/sdk/lib/ucrt/aarch64"),
          |entry("CARGO_TARGET_AARCH64_PC_WINDOWS_MSVC_LINKER", "lld")
        ]),
        pre_commands=[
          |command("apt-get", ["update"]),
          |command("apt-get", ["install", "-y", "lld"]),
          |command("rustup", ["target", "add", "aarch64-pc-windows-msvc"]),
          |command("bash", ["-c", "
            if [ ! -f .cargo/bin/xwin ]
            then
              cargo install xwin --locked
              xwin --accept-license --log-level info --manifest-version 16 --arch aarch64 --cache-dir /.xwin-cache splat --output /.xwin
            fi"])
        ],
        repository_url=repository_url, gitlab_token=gitlab_token, project=project, sha=sha, ref=ref, pipeline=pipeline, on_github=on_github, on_gitlab=on_gitlab
      )
    Self.trigger -> releaseAarch64PcWindowsMsvc.trigger,binary -> Self.binReleaseAarch64PcWindowsMsvc
                    releaseAarch64PcWindowsMsvc.testers --------> Self.binTestersAarch64PcWindowsMsvc
}