
use core/fs/write::FilesWriter
use core/fs/write::WriteFile

/**
Write one file.

The bytes received through `data` are written in the file located at `path`.
The writing behavior is set up by the parameters:
- `append`: bytes are added to the file instead of replacing the existing file;
- `create`: if the file does not exists, it is created;
- `new`: the file is _required_ to being new, if a file already exists at that path then the writing fails.

The amount of written bytes is sent through `amount`. There is no guarantee about its increment, as an undefined number of bytes may be written at once.

`success` is emitted when successful writting is finished. `failure` is emitted if an error occurs, and `message` contains the related text.
*/
sequence Write(const append: bool = false, const create: bool = true, const new: bool = false)
  model FilesWriter(append=append, create=create, new=new)
  input path: Block<string>
  input data: Stream<byte>
  output amount: Stream<u64>
  output success: Block<void>
  output failure: Block<void>
  output message: Stream<string>
{
    Write: WriteFile[writer=FilesWriter]()

    Self.path -> Write.path
    Self.data -> Write.data

    Write.amount -> Self.amount
    Write.success -> Self.success
    Write.failure -> Self.failure
    Write.message -> Self.message
}

use std/flow/byte::Trigger
use std/filler/scalar/string::Emit

/**
Write one file.

The bytes received through `data` are written in the file located at `path`.
The writing behavior is set up by the parameters:
- `append`: bytes are added to the file instead of replacing the existing file;
- `create`: if the file does not exists, it is created;
- `new`: the file is _required_ to being new, if a file already exists at that path then the writing fails.

The amount of written bytes is sent through `amount`. There is no guarantee about its increment, as an undefined number of bytes may be written at once.

`success` is emitted when successful writting is finished. `failure` is emitted if an error occurs, and `message` contains the related text.
*/
sequence WritePath(const append: bool = false, const create: bool = true, const new: bool = false, var path: string)
  input data: Stream<byte>
  output amount: Stream<u64>
  output success: Block<void>
  output failure: Block<void>
  output message: Stream<string>
{
    Write(append=append, create=create, new=new)
    Trigger()
    Emit(value=path)

    Self.data -> Trigger.value,start -> Emit.trigger,value -> Write.path
    Self.data -> Write.data

    Write.amount -> Self.amount
    Write.success -> Self.success
    Write.failure -> Self.failure
    Write.message -> Self.message
}
