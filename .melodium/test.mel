use cicd/runners::CicdDispatchEngine
use cicd/runners::CicdRunnerEngine
use cicd/runners::setupRunner
use cicd/runners::stopRunner
use cicd/steps::stepOn
use cicd/steps::stepOnWithInput
use log/logger::Logger
use process/command::Command
use process/command::|command
use process/command::|raw_commands
use process/environment::Environment
use process/environment::|environment
use std/text/compose::|format
use std/conv::|to_string
use std/data/string_map::StringMap
use std/data/string_map::|entry
use std/data/string_map::|map
use std/ops/option::|wrap
use std/flow/concentrate::Concentrator
use std/flow/concentrate::concentrateBlock
use std/flow/concentrate::concentrated
use std/flow::flock
use std/flow::passBlock
use std/flow::trigger
use std/flow::waitBlock
use work/resources::|container
use work/resources::|service_container
use work/resources/arch::Arch
use work/resources::|volume
use work/resources::|mount
use root/states::setServiceState

treatment test[cicd: CicdDispatchEngine, logger: Logger](test: bool, arch: Arch, target: string, test_image: string, pre_commands: Vec<Command> = [], report_service_token: string, pipeline: string, project: string, sha: string, ref: string, on_github: bool = false, on_gitlab: bool = false)
  model runner: CicdRunnerEngine()
  model failureConcentrator: Concentrator()
  input trigger: Block<void>
  input testers: Stream<byte>
  input binary:  Stream<byte>
  output finished: Block<void>
{
    doTest: passBlock<void>(cond=test)
    setServiceState[logger=logger](report=test, gitlab_root_url="https://gitlab.com/api/v4", token=report_service_token, project=project, sha=sha, ref=ref, pipeline=pipeline, name=|format("Test target {target}", |entry("target", target)), description=|format("Test Mélodium on Mélodium-managed CI (test: {do})", |entry("do", |to_string<bool>(test))), on_github=on_github, on_gitlab=on_gitlab)
    setupRunner[
        dispatcher=cicd,
        runner=runner,
        logger=logger
    ](
        name=|format("test:{target}", |entry("target", target)),
        cpu=1000,
        memory=500,
        storage=1000,
        volumes=[|volume("binaries", 500)],
        containers=[
            |container("testers", 500, 1000, 5000, arch, [|mount("binaries", "/mounted/binaries")], test_image, _)
        ],
        service_containers=[
          |service_container("postgres", 1000, 500, 5000, arch, [], "postgres:16", _, |wrap<StringMap>(|map([
            |entry("PGPORT", "42000"),
            |entry("POSTGRES_DB", "test_db"),
            |entry("POSTGRES_USER", "test_user"),
            |entry("POSTGRES_PASSWORD", "test_pAs$w0rÐ"),
            |entry("POSTGRES_HOST", "localhost"),
            |entry("POSTGRES_HOST_AUTH_METHOD", "trust")
          ])), _)
        ],
        stop_on_failure=false
    )
    setupRunnerFail: concentrateBlock<void>[concentrator=failureConcentrator]()
    setupRunner.failed -> setupRunnerFail.data
    preStep: stepOn[runner=runner, logger=logger](
        name=|format("test:{target}", |entry("target", target)),
        executor_name="testers",
        commands=pre_commands
    )
    preStepFail: concentrateBlock<void>[concentrator=failureConcentrator]()
    preStep.failed -> preStepFail.data
    installMelodium: stepOnWithInput[runner=runner, logger=logger](
        name=|format("test:{target}", |entry("target", target)),
        executor_name="testers",
        in_filesystem="binaries",
        in_file="melodium",
        commands=[
            |command("mv", ["/mounted/binaries/melodium", "/usr/local/bin/melodium"]),
            |command("chmod", ["+x", "/usr/local/bin/melodium"])
        ]
    )
    installMelodiumFail: concentrateBlock<void>[concentrator=failureConcentrator]()
    installMelodium.failed -> installMelodiumFail.data
    makeTests: stepOnWithInput[runner=runner, logger=logger](
        name=|format("test:{target}", |entry("target", target)),
        executor_name="testers",
        in_filesystem="binaries",
        in_file="testers.tar.gz",
        environment=|wrap<Environment>(|environment(|map([
            |entry("PGPORT", "42000"),
            |entry("POSTGRES_DB", "test_db"),
            |entry("POSTGRES_USER", "test_user"),
            |entry("POSTGRES_PASSWORD", "test_pAs$w0rÐ"),
            |entry("POSTGRES_HOST", "localhost"),
            |entry("POSTGRES_HOST_AUTH_METHOD", "trust")
        ]), _, false, false)),
        commands=[
            |command("tar", ["--verbose", "--extract", "--gzip", "--file", "/mounted/binaries/testers.tar.gz"]),
            |command("echo", ["complex_call"]),
            |command("./complex_call", []),
            |command("echo", ["fs"]),
            |command("./fs", []),
            |command("echo", ["generics"]),
            |command("./generics", []),
            |command("echo", ["http_client"]),
            |command("./http_client", []),
            |command("echo", ["http_javascript"]),
            |command("./http_javascript", []),
            |command("echo", ["process"]),
            |command("./process", []),
            |command("echo", ["regex"]),
            |command("./regex", []),
            |command("echo", ["sql"]),
            |command("./sql", []),
            |command("echo", ["http_distributed"]),
            |command("./http_distributed", [])
        ]
    )
    makeTestsFail: concentrateBlock<void>[concentrator=failureConcentrator]()
    makeTests.failed -> makeTestsFail.data

    stopRunner[runner=runner]()

    concentratedFailure: concentrated<void>[concentrator=failureConcentrator]()
    triggerFailure: trigger<void>()
    Self.trigger -> concentratedFailure.trigger,data -> triggerFailure.stream,start -> setServiceState.failed

    Self.trigger -> doTest.block,passed -> setupRunner.trigger,ready -> preStep.trigger,completed -> installMelodium.trigger,completed ---> makeTests.trigger,finished -> Self.finished
    Self.testers -------------------------------------------------------------------------------------------------------------------------> makeTests.data,finished ----> stopRunner.trigger
    Self.binary -----------------------------------------------------------------------------------> installMelodium.data

    doTest.passed -> setServiceState.pending
    installMelodium.completed -> setServiceState.running
    makeTests.completed -> setServiceState.success
}
