use core/arithmetic/scalar::StaticAddU128

/**
Add a static value to `u128`.

Every number passed through the stream get `value` added.
*/
sequence StaticAdd(var value: u128 = 0)
  input  value: Stream<u128>
  output value: Stream<u128>
{
    StaticAddU128(value=value)

    Self.value -> StaticAddU128.value,value -> Self.value
}

use core/arithmetic/scalar::AddU128

/**
Add values from two streams of `u128`.

Values passed through a & b are added and send in sum.

*/
sequence Add()
  input  a:   Stream<u128>
  input  b:   Stream<u128>
  output sum: Stream<u128>
{
    AddU128()

    Self.a -> AddU128.a
    Self.b -> AddU128.b
    
    AddU128.sum -> Self.sum
}

use core/arithmetic/scalar::StaticSubU128 

/**
Substract a static value to `u128`.

Every number passed through the stream get `value` substracted.

*/
sequence StaticSub(var sub: u128 = 0)
  input  value: Stream<u128>
  output value: Stream<u128>
{
    StaticSubU128(sub=sub)

    Self.value -> StaticSubU128.value,value -> Self.value
}


use core/arithmetic/scalar::SubU128 

/**
Substract values from two streams of `u128`.

Every `a` number passed through the stream get `b` substracted.

*/
sequence Sub()
  input  a:          Stream<u128>
  input  b:          Stream<u128>
  output difference: Stream<u128>
{
    SubU128()

    Self.a -> SubU128.a
    Self.b -> SubU128.b
    
    SubU128.difference -> Self.difference
}


use core/arithmetic/scalar::StaticMultU128 

/**
Multiply `u128` by static value.

Every number passed through the stream is multiplied by `value`.

*/
sequence StaticMult(var factor: u128 = 0)
  input  value: Stream<u128>
  output value: Stream<u128>
{
    StaticMultU128(factor=factor)

    Self.value -> StaticMultU128.value,value -> Self.value
}


use core/arithmetic/scalar::MultU128 

/**
Multiply values from two streams of `u128`.

Every `a` number passed through the stream is multiplied by `b`.

*/
sequence Mult()
  input  a:       Stream<u128>
  input  b:       Stream<u128>
  output product: Stream<u128>
{
    MultU128()

    Self.a -> MultU128.a
    Self.b -> MultU128.b
    
    MultU128.product -> Self.product
}


use core/arithmetic/scalar::StaticDivU128 

/**
Divide a stream of `u128` by a static value.

Every number passed through the stream is divided by `value`.

*/
sequence StaticDiv(var divisor: u128 = 0)
  input  value: Stream<u128>
  output value: Stream<u128>
{
    StaticDivU128(divisor=divisor)

    Self.value -> StaticDivU128.value,value -> Self.value
}


use core/arithmetic/scalar::DivU128 

/**
Divide values from two streams of `u128`.

Every `a` number passed through the stream is divided by `b`.

*/
sequence Div()
  input  a:        Stream<u128>
  input  b:        Stream<u128>
  output quotient: Stream<u128>
{
    DivU128()

    Self.a -> DivU128.a
    Self.b -> DivU128.b
    
    DivU128.quotient -> Self.quotient
}


use core/arithmetic/scalar::StaticRemU128 

/**
Give the remainder of a stream of `u128` divided by a static value.

Every number passed through the stream is divided by `value` and the remainder is outputted.

*/
sequence StaticRem(var divisor: u128 = 0)
  input  value: Stream<u128>
  output value: Stream<u128>
{
    StaticRemU128(divisor=divisor)

    Self.value -> StaticRemU128.value,value -> Self.value
}


use core/arithmetic/scalar::RemU128 

/**
Give the remainder of the division from two streams of `u128`.

Every `a` number passed through the stream is divided by `b` and the remainder is outputted.

*/
sequence Rem()
  input  a:         Stream<u128>
  input  b:         Stream<u128>
  output remainder: Stream<u128>
{
    RemU128()

    Self.a -> RemU128.a
    Self.b -> RemU128.b
    
    RemU128.remainder -> Self.remainder
}




use core/arithmetic/scalar::StaticPowU128 

/**
Elevates `u128` to the power of a static value.

Every number passed through the stream get elevated to the power of `exponent`.
*/
sequence StaticPow(var exponent: u128 = 0)
  input  value: Stream<u128>
  output value: Stream<u128>
{
    StaticPowU128(exponent=exponent)

    Self.value -> StaticPowU128.value,value -> Self.value
}


use core/arithmetic/scalar::PowU128 

/**
Elevates values from a stream of `u128` to the power of another one.

Values passed through `base` are elevated to the power of `exponent`.

*/
sequence Pow()
  input  base:     Stream<u128>
  input  exponent: Stream<u128>
  output power:    Stream<u128>
{
    PowU128()

    Self.base -----> PowU128.base
    Self.exponent -> PowU128.exponent
    
    PowU128.power -> Self.power
}
