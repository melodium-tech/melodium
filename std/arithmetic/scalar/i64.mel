use core/arithmetic/scalar::StaticAddI64

/**
Add a static value to `i64`.

Every number passed through the stream get `add` added.
*/
sequence StaticAdd(var add: i64 = 0)
  input  value: Stream<i64>
  output value: Stream<i64>
{
    StaticAddI64(add=add)

    Self.value -> StaticAddI64.value,value -> Self.value
}

use core/arithmetic/scalar::AddI64

/**
Add values from two streams of `i64`.

Values passed through a & b are added and send in sum.

*/
sequence Add()
  input  a:   Stream<i64>
  input  b:   Stream<i64>
  output sum: Stream<i64>
{
    AddI64()

    Self.a -> AddI64.a
    Self.b -> AddI64.b
    
    AddI64.sum -> Self.sum
}

use core/arithmetic/scalar::StaticSubI64 

/**
Substract a static value to `i64`.

Every number passed through the stream get `sub` substracted.

*/
sequence StaticSub(var sub: i64 = 0)
  input  value: Stream<i64>
  output value: Stream<i64>
{
    StaticSubI64(sub=sub)

    Self.value -> StaticSubI64.value,value -> Self.value
}


use core/arithmetic/scalar::SubI64 

/**
Substract values from two streams of `i64`.

Every `a` number passed through the stream get `b` substracted.

*/
sequence Sub()
  input  a:          Stream<i64>
  input  b:          Stream<i64>
  output difference: Stream<i64>
{
    SubI64()

    Self.a -> SubI64.a
    Self.b -> SubI64.b
    
    SubI64.difference -> Self.difference
}


use core/arithmetic/scalar::StaticMultI64 

/**
Multiply `i64` by static value.

Every number passed through the stream is multiplied by `factor`.

*/
sequence StaticMult(var factor: i64 = 0)
  input  value: Stream<i64>
  output value: Stream<i64>
{
    StaticMultI64(factor=factor)

    Self.value -> StaticMultI64.value,value -> Self.value
}


use core/arithmetic/scalar::MultI64 

/**
Multiply values from two streams of `i64`.

Every `a` number passed through the stream is multiplied by `b`.

*/
sequence Mult()
  input  a:       Stream<i64>
  input  b:       Stream<i64>
  output product: Stream<i64>
{
    MultI64()

    Self.a -> MultI64.a
    Self.b -> MultI64.b
    
    MultI64.product -> Self.product
}


use core/arithmetic/scalar::StaticDivI64 

/**
Divide a stream of `i64` by a static value.

Every number passed through the stream is divided by `divisor`.

*/
sequence StaticDiv(var divisor: i64 = 0)
  input  value: Stream<i64>
  output value: Stream<i64>
{
    StaticDivI64(divisor=divisor)

    Self.value -> StaticDivI64.value,value -> Self.value
}


use core/arithmetic/scalar::DivI64 

/**
Divide values from two streams of `i64`.

Every `a` number passed through the stream is divided by `b`.

*/
sequence Div()
  input  a:        Stream<i64>
  input  b:        Stream<i64>
  output quotient: Stream<i64>
{
    DivI64()

    Self.a -> DivI64.a
    Self.b -> DivI64.b
    
    DivI64.quotient -> Self.quotient
}


use core/arithmetic/scalar::StaticRemI64 

/**
Give the remainder of a stream of `i64` divided by a static value.

Every number passed through the stream is divided by `divisor` and the remainder is outputted.

*/
sequence StaticRem(var divisor: i64 = 0)
  input  value: Stream<i64>
  output value: Stream<i64>
{
    StaticRemI64(divisor=divisor)

    Self.value -> StaticRemI64.value,value -> Self.value
}


use core/arithmetic/scalar::RemI64 

/**
Give the remainder of the division from two streams of `i64`.

Every `a` number passed through the stream is divided by `b` and the remainder is outputted.

*/
sequence Rem()
  input  a:         Stream<i64>
  input  b:         Stream<i64>
  output remainder: Stream<i64>
{
    RemI64()

    Self.a -> RemI64.a
    Self.b -> RemI64.b
    
    RemI64.remainder -> Self.remainder
}




use core/arithmetic/scalar::StaticPowI64 

/**
Elevates `i64` to the power of a static value.

Every number passed through the stream get elevated to the power of `exponent`.
*/
sequence StaticPow(var exponent: i64 = 0)
  input  value: Stream<i64>
  output value: Stream<i64>
{
    StaticPowI64(exponent=exponent)

    Self.value -> StaticPowI64.value,value -> Self.value
}


use core/arithmetic/scalar::PowI64 

/**
Elevates values from a stream of `i64` to the power of another one.

Values passed through `base` are elevated to the power of `exponent`.

*/
sequence Pow()
  input  base:     Stream<i64>
  input  exponent: Stream<i64>
  output power:    Stream<i64>
{
    PowI64()

    Self.base -----> PowI64.base
    Self.exponent -> PowI64.exponent
    
    PowI64.power -> Self.power
}

use core/arithmetic/scalar::AbsI64

/**
Get the absolute values from a stream of `i64`.

*/
sequence Abs()
  input  value: Stream<i64>
  output value: Stream<i64>
{
    AbsI64()

    Self.value -> AbsI64.value,value -> Self.value
}
