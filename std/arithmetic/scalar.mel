
use core/arithmetic/scalar::AddU8 as CoreAddU8

/**
Add value to `u8`.

Every number passed through the stream will have `value` added.

```
use std/arithmetic/scalar::AddU8

sequence Foo()
  input  in:  Stream<u8>
  output out: Stream<u8>
{
    AddU8(value=5)

    // in is increased by 5 and send to out
    Self.in -> AddU8.value,value -> Self.out
}
```
*/
sequence AddU8(var value: u8 = 0)
  input  value: Stream<u8>
  output value: Stream<u8>
{
    CoreAddU8(value=value)

    Self.value -> CoreAddU8.value,value -> Self.value
}



use core/arithmetic/scalar::AddU16 as CoreAddU16

/**
Add value to `u16`.

Every number passed through the stream will have `value` added.

```
use std/arithmetic/scalar::AddU16

sequence Foo()
  input  in:  Stream<u16>
  output out: Stream<u16>
{
    AddU16(value=5)

    // in is increased by 5 and send to out
    Self.in -> AddU16.value,value -> Self.out
}
```
*/
sequence AddU16(var value: u16 = 0)
  input  value: Stream<u16>
  output value: Stream<u16>
{
    CoreAddU16(value=value)

    Self.value -> CoreAddU16.value,value -> Self.value
}



use core/arithmetic/scalar::AddU32 as CoreAddU32

/**
Add value to `u32`.

Every number passed through the stream will have `value` added.

```
use std/arithmetic/scalar::AddU32

sequence Foo()
  input  in:  Stream<u32>
  output out: Stream<u32>
{
    AddU32(value=5)

    // in is increased by 5 and send to out
    Self.in -> AddU32.value,value -> Self.out
}
```
*/
sequence AddU32(var value: u32 = 0)
  input  value: Stream<u32>
  output value: Stream<u32>
{
    CoreAddU32(value=value)

    Self.value -> CoreAddU32.value,value -> Self.value
}



use core/arithmetic/scalar::AddU64 as CoreAddU64

/**
Add value to `u64`.

Every number passed through the stream will have `value` added.

```
use std/arithmetic/scalar::AddU64

sequence Foo()
  input  in:  Stream<u64>
  output out: Stream<u64>
{
    AddU64(value=5)

    // in is increased by 5 and send to out
    Self.in -> AddU64.value,value -> Self.out
}
```
*/
sequence AddU64(var value: u64 = 0)
  input  value: Stream<u64>
  output value: Stream<u64>
{
    CoreAddU64(value=value)

    Self.value -> CoreAddU64.value,value -> Self.value
}



use core/arithmetic/scalar::AddU128 as CoreAddU128

/**
Add value to `u128`.

Every number passed through the stream will have `value` added.

```
use std/arithmetic/scalar::AddU128

sequence Foo()
  input  in:  Stream<u128>
  output out: Stream<u128>
{
    AddU128(value=5)

    // in is increased by 5 and send to out
    Self.in -> AddU128.value,value -> Self.out
}
```
*/
sequence AddU128(var value: u128 = 0)
  input  value: Stream<u128>
  output value: Stream<u128>
{
    CoreAddU128(value=value)

    Self.value -> CoreAddU128.value,value -> Self.value
}



use core/arithmetic/scalar::AddI8 as CoreAddI8

/**
Add value to `i8`.

Every number passed through the stream will have `value` added.

```
use std/arithmetic/scalar::AddI8

sequence Foo()
  input  in:  Stream<i8>
  output out: Stream<i8>
{
    AddI8(value=5)

    // in is increased by 5 and send to out
    Self.in -> AddI8.value,value -> Self.out
}
```
*/
sequence AddI8(var value: i8 = 0)
  input  value: Stream<i8>
  output value: Stream<i8>
{
    CoreAddI8(value=value)

    Self.value -> CoreAddI8.value,value -> Self.value
}



use core/arithmetic/scalar::AddI16 as CoreAddI16

/**
Add value to `i16`.

Every number passed through the stream will have `value` added.

```
use std/arithmetic/scalar::AddI16

sequence Foo()
  input  in:  Stream<i16>
  output out: Stream<i16>
{
    AddI16(value=5)

    // in is increased by 5 and send to out
    Self.in -> AddI16.value,value -> Self.out
}
```
*/
sequence AddI16(var value: i16 = 0)
  input  value: Stream<i16>
  output value: Stream<i16>
{
    CoreAddI16(value=value)

    Self.value -> CoreAddI16.value,value -> Self.value
}



use core/arithmetic/scalar::AddI32 as CoreAddI32

/**
Add value to `i32`.

Every number passed through the stream will have `value` added.

```
use std/arithmetic/scalar::AddI32

sequence Foo()
  input  in:  Stream<i32>
  output out: Stream<i32>
{
    AddI32(value=5)

    // in is increased by 5 and send to out
    Self.in -> AddI32.value,value -> Self.out
}
```
*/
sequence AddI32(var value: i32 = 0)
  input  value: Stream<i32>
  output value: Stream<i32>
{
    CoreAddI32(value=value)

    Self.value -> CoreAddI32.value,value -> Self.value
}



use core/arithmetic/scalar::AddI64 as CoreAddI64

/**
Add value to `i64`.

Every number passed through the stream will have `value` added.

```
use std/arithmetic/scalar::AddI64

sequence Foo()
  input  in:  Stream<i64>
  output out: Stream<i64>
{
    AddI64(value=5)

    // in is increased by 5 and send to out
    Self.in -> AddI64.value,value -> Self.out
}
```
*/
sequence AddI64(var value: i64 = 0)
  input  value: Stream<i64>
  output value: Stream<i64>
{
    CoreAddI64(value=value)

    Self.value -> CoreAddI64.value,value -> Self.value
}



use core/arithmetic/scalar::AddI128 as CoreAddI128

/**
Add value to `i128`.

Every number passed through the stream will have `value` added.

```
use std/arithmetic/scalar::AddI128

sequence Foo()
  input  in:  Stream<i128>
  output out: Stream<i128>
{
    AddI128(value=5)

    // in is increased by 5 and send to out
    Self.in -> AddI128.value,value -> Self.out
}
```
*/
sequence AddI128(var value: i128 = 0)
  input  value: Stream<i128>
  output value: Stream<i128>
{
    CoreAddI128(value=value)

    Self.value -> CoreAddI128.value,value -> Self.value
}



use core/arithmetic/scalar::AddF32 as CoreAddF32

/**
Add value to `f32`.

Every number passed through the stream will have `value` added.

```
use std/arithmetic/scalar::AddF32

sequence Foo()
  input  in:  Stream<f32>
  output out: Stream<f32>
{
    AddF32(value=5)

    // in is increased by 5 and send to out
    Self.in -> AddF32.value,value -> Self.out
}
```
*/
sequence AddF32(var value: f32 = 0)
  input  value: Stream<f32>
  output value: Stream<f32>
{
    CoreAddF32(value=value)

    Self.value -> CoreAddF32.value,value -> Self.value
}



use core/arithmetic/scalar::AddF64 as CoreAddF64

/**
Add value to `f64`.

Every number passed through the stream will have `value` added.

```
use std/arithmetic/scalar::AddF64

sequence Foo()
  input  in:  Stream<f64>
  output out: Stream<f64>
{
    AddF64(value=5)

    // in is increased by 5 and send to out
    Self.in -> AddF64.value,value -> Self.out
}
```
*/
sequence AddF64(var value: f64 = 0)
  input  value: Stream<f64>
  output value: Stream<f64>
{
    CoreAddF64(value=value)

    Self.value -> CoreAddF64.value,value -> Self.value
}


