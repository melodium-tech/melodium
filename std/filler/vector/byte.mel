
use std/flow/void::Linearize
use std/flow/byte::Organize
use std/filler/scalar/byte::StaticFill as ScalarStaticFill

/**
Fill an input `Vec<void>` stream with scalar static `byte` values.

```mermaid
graph LR
    T("StaticFillÂ (value=ğŸŸ§)")
    B["â€¦ï¼»ğŸŸ¦Â ğŸŸ¦Â ğŸŸ¦ï¼½ï¼»ğŸŸ¦Â ğŸŸ¦ï¼½ï¼»ğŸŸ¦Â ğŸŸ¦Â ğŸŸ¦ï¼½â€¦"] -->|pattern| T
    
    T -->|value| O["â€¦ï¼»ğŸŸ§Â ğŸŸ§Â ğŸŸ§ï¼½ï¼»ğŸŸ§Â ğŸŸ§ï¼½ï¼»ğŸŸ§Â ğŸŸ§Â ğŸŸ§ï¼½â€¦"]

    style B fill:#ffff,stroke:#ffff
    style O fill:#ffff,stroke:#ffff
```
*/
sequence StaticFill(var value: byte = 0x00)
  input pattern: Stream<Vec<void>>
  output value:  Stream<Vec<byte>>
{
    Linearize()
    ScalarStaticFill(value=value)
    Organize()

    Self.pattern -> Linearize.vector,value -> ScalarStaticFill.pattern,value -> Organize.value,values -> Self.value
    Self.pattern -------------------------------------------------------------> Organize.pattern
    
}


use std/flow/void::StreamBlock
use std/filler/scalar/byte::StaticVecFill

/**
Emit a value as stream when trigger is received.

The vector is sent through the stream and the stream is closed immediately afterwards.

```mermaid
graph LR
    T("Emit(value=ï¼»ğŸŸ§ ğŸŸ§ ğŸŸ§ï¼½)")
    B["ã€ˆğŸŸ¦ã€‰"] -->|trigger| T
    
    T -->|value| O["ï¼»ğŸŸ§ ğŸŸ§ ğŸŸ§ï¼½"]

    style B fill:#ffff,stroke:#ffff
    style O fill:#ffff,stroke:#ffff
```
*/
sequence Emit(var value: Vec<byte> = [0x00])
  input trigger: Block<void>
  output value:  Stream<Vec<byte>>
{
    StreamBlock()
    StaticVecFill(value=value)

    Self.trigger -> StreamBlock.block,stream -> StaticVecFill.pattern,value -> Self.value
}

