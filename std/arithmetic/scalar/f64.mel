use core/arithmetic/scalar::SqrtF64 

/**
Computes the square roots from a stream of `f64`.

*/
sequence Sqrt()
  input  value: Stream<f64>
  output value: Stream<f64>
{
    SqrtF64()

    Self.value -> SqrtF64.value,value -> Self.value
}


use core/arithmetic/scalar::CbrtF64 

/**
Computes the cube roots from a stream of `f64`.

*/
sequence Cbrt()
  input  value: Stream<f64>
  output value: Stream<f64>
{
    CbrtF64()

    Self.value -> CbrtF64.value,value -> Self.value
}


use core/arithmetic/scalar::LnF64 

/**
Computes the natural logarithms of a stream of `f64`.

*/
sequence Ln()
  input  value: Stream<f64>
  output value: Stream<f64>
{
    LnF64()

    Self.value -> LnF64.value,value -> Self.value
}

use core/arithmetic/scalar::StaticLogF64 

/**
Computes the logarithms from a stream of `f64` with respect to a static base.

*/
sequence StaticLog(var base: f64 = 10)
  input  value: Stream<f64>
  output value: Stream<f64>
{
    StaticLogF64(base=base)

    Self.value -> StaticLogF64.value,value -> Self.value
}


use core/arithmetic/scalar::LogF64 

/**
Computes logarithms from a stream of `f64` with the base of another one.

*/
sequence Log()
  input  value: Stream<f64>
  input  base:  Stream<f64>
  output log:   Stream<f64>
{
    LogF64()

    Self.base --> LogF64.base
    Self.value -> LogF64.value
    
    LogF64.log -> Self.log
}
use core/arithmetic/scalar::StaticAddF64

/**
Add a static value to `f64`.

Every number passed through the stream get `value` added.
*/
sequence StaticAdd(var value: f64 = 0)
  input  value: Stream<f64>
  output value: Stream<f64>
{
    StaticAddF64(value=value)

    Self.value -> StaticAddF64.value,value -> Self.value
}

use core/arithmetic/scalar::AddF64

/**
Add values from two streams of `f64`.

Values passed through a & b are added and send in sum.

*/
sequence Add()
  input  a:   Stream<f64>
  input  b:   Stream<f64>
  output sum: Stream<f64>
{
    AddF64()

    Self.a -> AddF64.a
    Self.b -> AddF64.b
    
    AddF64.sum -> Self.sum
}

use core/arithmetic/scalar::StaticSubF64 

/**
Substract a static value to `f64`.

Every number passed through the stream get `value` substracted.

*/
sequence StaticSub(var sub: f64 = 0)
  input  value: Stream<f64>
  output value: Stream<f64>
{
    StaticSubF64(sub=sub)

    Self.value -> StaticSubF64.value,value -> Self.value
}


use core/arithmetic/scalar::SubF64 

/**
Substract values from two streams of `f64`.

Every `a` number passed through the stream get `b` substracted.

*/
sequence Sub()
  input  a:          Stream<f64>
  input  b:          Stream<f64>
  output difference: Stream<f64>
{
    SubF64()

    Self.a -> SubF64.a
    Self.b -> SubF64.b
    
    SubF64.difference -> Self.difference
}


use core/arithmetic/scalar::StaticMultF64 

/**
Multiply `f64` by static value.

Every number passed through the stream is multiplied by `value`.

*/
sequence StaticMult(var factor: f64 = 0)
  input  value: Stream<f64>
  output value: Stream<f64>
{
    StaticMultF64(factor=factor)

    Self.value -> StaticMultF64.value,value -> Self.value
}


use core/arithmetic/scalar::MultF64 

/**
Multiply values from two streams of `f64`.

Every `a` number passed through the stream is multiplied by `b`.

*/
sequence Mult()
  input  a:       Stream<f64>
  input  b:       Stream<f64>
  output product: Stream<f64>
{
    MultF64()

    Self.a -> MultF64.a
    Self.b -> MultF64.b
    
    MultF64.product -> Self.product
}


use core/arithmetic/scalar::StaticDivF64 

/**
Divide a stream of `f64` by a static value.

Every number passed through the stream is divided by `value`.

*/
sequence StaticDiv(var divisor: f64 = 0)
  input  value: Stream<f64>
  output value: Stream<f64>
{
    StaticDivF64(divisor=divisor)

    Self.value -> StaticDivF64.value,value -> Self.value
}


use core/arithmetic/scalar::DivF64 

/**
Divide values from two streams of `f64`.

Every `a` number passed through the stream is divided by `b`.

*/
sequence Div()
  input  a:        Stream<f64>
  input  b:        Stream<f64>
  output quotient: Stream<f64>
{
    DivF64()

    Self.a -> DivF64.a
    Self.b -> DivF64.b
    
    DivF64.quotient -> Self.quotient
}


use core/arithmetic/scalar::StaticRemF64 

/**
Give the remainder of a stream of `f64` divided by a static value.

Every number passed through the stream is divided by `value` and the remainder is outputted.

*/
sequence StaticRem(var divisor: f64 = 0)
  input  value: Stream<f64>
  output value: Stream<f64>
{
    StaticRemF64(divisor=divisor)

    Self.value -> StaticRemF64.value,value -> Self.value
}


use core/arithmetic/scalar::RemF64 

/**
Give the remainder of the division from two streams of `f64`.

Every `a` number passed through the stream is divided by `b` and the remainder is outputted.

*/
sequence Rem()
  input  a:         Stream<f64>
  input  b:         Stream<f64>
  output remainder: Stream<f64>
{
    RemF64()

    Self.a -> RemF64.a
    Self.b -> RemF64.b
    
    RemF64.remainder -> Self.remainder
}




use core/arithmetic/scalar::StaticPowF64 

/**
Elevates `f64` to the power of a static value.

Every number passed through the stream get elevated to the power of `exponent`.
*/
sequence StaticPow(var exponent: f64 = 0)
  input  value: Stream<f64>
  output value: Stream<f64>
{
    StaticPowF64(exponent=exponent)

    Self.value -> StaticPowF64.value,value -> Self.value
}


use core/arithmetic/scalar::PowF64 

/**
Elevates values from a stream of `f64` to the power of another one.

Values passed through `base` are elevated to the power of `exponent`.

*/
sequence Pow()
  input  base:     Stream<f64>
  input  exponent: Stream<f64>
  output power:    Stream<f64>
{
    PowF64()

    Self.base -----> PowF64.base
    Self.exponent -> PowF64.exponent
    
    PowF64.power -> Self.power
}

use core/arithmetic/scalar::AbsF64

/**
Get the absolute values from a stream of `f64`.

*/
sequence Abs()
  input  value: Stream<f64>
  output value: Stream<f64>
{
    AbsF64()

    Self.value -> AbsF64.value,value -> Self.value
}
