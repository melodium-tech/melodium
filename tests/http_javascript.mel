#!/usr/bin/env melodium
#! name = http_javascript
#! version = 0.8.0
#! require = http:0.8.0-rc2 std:0.8.0-rc2 javascript:0.8.0-rc2 encoding:0.8.0-rc2 json:0.8.0-rc2

use http/server::HttpServer
use http/server::connection
use http/method::HttpMethod
use http/status::|ok
use http/status::HttpStatus
use http/method::|post
use std/flow::emit
use std/flow::trigger
use std/ops/option::unwrapOr
use std/ops/option::unwrap
use std/conv::toString
use std/data::Map
use std/data::|map
use encoding::decode
use encoding::encode
use javascript::JavaScriptEngine
use javascript::process
use json::toJson
use json::Json
use json/value::|null

treatment main()
  model server: HttpServer(
    host="localhost",
    port=62333
  )
{
    connection[http_server=server](method=|post(), route="/hello")
    status: emit<HttpStatus>(value=|ok())
    headers: emit<Map>(value=|map([]))
    trigger<byte>()
    
    connection.data -> trigger.stream,start --> status.trigger,emit -> connection.status
                       trigger.start --------> headers.trigger,emit -> connection.headers
    
    decode()
    toJson()
    unwrap<Json>()
    js_function()
    encode()
    
    connection.data -> decode.data,text -> toJson.text,json -> unwrap.option,value -> js_function.data,data -> encode.text,data -> connection.data
}

model JsEngine(): JavaScriptEngine {
    code = "function greet(someone) {
    return {
        response: `Hello ${someone}!`,
        ps: \"Thanks for contacting me :D\"}
    }"
}

treatment js_function()
  model JsEngine: JsEngine()
  input data: Stream<Json>
  output data: Stream<string>
{
    process[engine=JsEngine](code="greet(value)")

    unwrapOr<Json>(default=|null())
    toString<Json>()
    
    Self.data -> process.value,result -> unwrapOr.option,value -> toString.value,into -> Self.data
}
