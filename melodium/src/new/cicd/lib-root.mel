use cicd/runners::CicdDispatchEngine
use cicd/logging::manageLogs
use local/works::build
use local/works::test
use log/logger::Logger
use std/engine/util::startup

/**
  `main` treatment, used as entrypoint as defined in `Compo.toml`.

  - `api_token`: service key provided to access Mélodium work distribution API;
  - `work_location`: location where dispatched job-workers take place (default throught API, can be set to `"compose"` for local run);
  - `output_directory`: directory where output files (including logs) are wrote;
  - `repository_clone_url`: URL to process Git clone;
  - `repository_clone_ref`: Git reference (sha or tag) to clone.

  All the other parameters are present to handle integration with CI services.
*/
treatment main(const api_token: string, const work_location: string = "api", output_directory: string, repository_clone_url: string, repository_clone_ref: string, repository_clone_sha: string = "", ci_service_token: string = "", ci_service_project: string = "", ci_service_ref: string = "", ci_service_pipeline: string = "", on_github: bool = false, on_gitlab: bool = false)
  // Model used to handle all logs.
  model logger: Logger()
  // Model used to dispatch work among Mélodium engines.
  model cicd: CicdDispatchEngine(api_token=api_token)
{
    startup()

    manageLogs[logger=logger](output_directory=output_directory)

    build[cicd=cicd, logger=logger](repository_clone_url=repository_clone_url, repository_clone_ref=repository_clone_ref)
    test[cicd=cicd, logger=logger]()

    startup.trigger -> build.trigger,data -> test.data
    startup.trigger -----------------------> test.trigger,finished -> manageLogs.stop
}