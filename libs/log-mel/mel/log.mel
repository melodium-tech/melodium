use root/logger::Logger
use root/logger::|debug
use root/logger::|error
use root/logger::|info
use root/logger::|trace
use root/logger::|warning
use root/logger::logBlock
use root/logger::logStream
use root/logger::logDataBlock
use root/logger::logDataStream

treatment logDebug[logger: Logger](label: string = "debug")
  input message: Block<string>
{
    logBlock[logger=logger](level = |debug(), label = label)

    Self.message -> logBlock.message
}

treatment logDebugs[logger: Logger](label: string = "debug")
  input message: Block<string>
{
    logStream[logger=logger](level = |debug(), label = label)

    Self.messages -> logStream.messages
}

treatment logDataDebug<D: Display>[logger: Logger](label: string = "debug")
  input data: Block<D>
{
    logDataBlock<D>[logger=logger](level = |debug(), label = label)

    Self.data -> logDataBlock.display
}

treatment logDataDebugs<D: Display>[logger: Logger](label: string = "debug")
  input data: Stream<D>
{
    logDataStream<D>[logger=logger](level = |debug(), label = label)

    Self.data -> logDataStream.display
}

treatment logError[logger: Logger](label: string = "error")
  input message: Block<string>
{
    logBlock[logger=logger](level = |error(), label = label)

    Self.message -> logBlock.message
}

treatment logErrors[logger: Logger](label: string = "error")
  input message: Block<string>
{
    logStream[logger=logger](level = |error(), label = label)

    Self.messages -> logStream.messages
}

treatment logDataError<D: Display>[logger: Logger](label: string = "error")
  input data: Block<D>
{
    logDataBlock<D>[logger=logger](level = |error(), label = label)

    Self.data -> logDataBlock.display
}

treatment logDataErrors<D: Display>[logger: Logger](label: string = "error")
  input data: Stream<D>
{
    logDataStream<D>[logger=logger](level = |error(), label = label)

    Self.data -> logDataStream.display
}

treatment logInfo[logger: Logger](label: string = "info")
  input message: Block<string>
{
    logBlock[logger=logger](level = |info(), label = label)

    Self.message -> logBlock.message
}

treatment logInfos[logger: Logger](label: string = "info")
  input message: Block<string>
{
    logStream[logger=logger](level = |info(), label = label)

    Self.messages -> logStream.messages
}

treatment logDataInfo<D: Display>[logger: Logger](label: string = "info")
  input data: Block<D>
{
    logDataBlock<D>[logger=logger](level = |info(), label = label)

    Self.data -> logDataBlock.display
}

treatment logDataInfos<D: Display>[logger: Logger](label: string = "info")
  input data: Stream<D>
{
    logDataStream<D>[logger=logger](level = |info(), label = label)

    Self.data -> logDataStream.display
}

treatment logTrace[logger: Logger](label: string = "trace")
  input message: Block<string>
{
    logBlock[logger=logger](level = |trace(), label = label)

    Self.message -> logBlock.message
}

treatment logTraces[logger: Logger](label: string = "trace")
  input message: Block<string>
{
    logStream[logger=logger](level = |trace(), label = label)

    Self.messages -> logStream.messages
}

treatment logDataTrace<D: Display>[logger: Logger](label: string = "trace")
  input data: Block<D>
{
    logDataBlock<D>[logger=logger](level = |trace(), label = label)

    Self.data -> logDataBlock.display
}

treatment logDataTraces<D: Display>[logger: Logger](label: string = "trace")
  input data: Stream<D>
{
    logDataStream<D>[logger=logger](level = |trace(), label = label)

    Self.data -> logDataStream.display
}

treatment logWarning[logger: Logger](label: string = "warning")
  input message: Block<string>
{
    logBlock[logger=logger](level = |warning(), label = label)

    Self.message -> logBlock.message
}

treatment logWarnings[logger: Logger](label: string = "warning")
  input message: Block<string>
{
    logStream[logger=logger](level = |warning(), label = label)

    Self.messages -> logStream.messages
}

treatment logDataWarning<D: Display>[logger: Logger](label: string = "warning")
  input data: Block<D>
{
    logDataBlock<D>[logger=logger](level = |warning(), label = label)

    Self.data -> logDataBlock.display
}

treatment logDataWarnings<D: Display>[logger: Logger](label: string = "warning")
  input data: Stream<D>
{
    logDataStream<D>[logger=logger](level = |warning(), label = label)

    Self.data -> logDataStream.display
}
