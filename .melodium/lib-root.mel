use std/flow::emit
use std/ops/option/block::unwrap
use std/ops/option::|wrap
use std/data/string_map::|entry
use std/data/string_map::StringMap
use std/engine/util::startup
use process/command::Command
use process/environment::Environment
use process/exec::Executor
use process/local::|local_executor
//use process/command::|command
use process/command::|raw_commands
use fs/filesystem::FileSystem
use fs/local::|local_filesystem
use fs/local::writeLocal
use log/logger::Logger
use log/logger::logs
use log/logger::stop
use log/console::console
use log/log::logErrors
use log/log::logInfoMessage
use log/log::logErrorMessage

use cicd/runners::CicdDistantEngine
use cicd/runners::runner
use cicd/runners::stopRunner
use cicd/steps::stepOn
use work/resources::|container
use work/resources/arch::|arm64
use work/resources/arch::|amd64
use work/resources::|volume
use work/resources::|mount
use process/command::|command
use root/build::buildMelodium

use std/data/string_map::|map

treatment main(const key: string)
  model logger: Logger()
  model cicd: CicdDistantEngine(key=key)
{
    startup()

    allLogs: logs[logger=logger]()
    logConsole: console(timestamp=true)
    allLogs.all -> logConsole.logs

    buildMelodium[cicd_distant=cicd, logger=logger](target="x86_64-unknown-linux-gnu", release=true, on=|amd64(), environment_variables=|map([]))

    startup.trigger -> buildMelodium.trigger

    writeLocal(path="/tmp/melodium_amd64")
    buildMelodium.data -> writeLocal.data
}

