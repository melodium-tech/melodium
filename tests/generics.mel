#!/usr/bin/env melodium
#! name = generics
#! version = 0.8.0
#! require = std:0.8.0
#! require = fs:0.8.0

use std/flow::emit
use std/flow::trigger
use std/flow::stream
use fs/file::write
use fs/local::|local_filesystem
use fs/filesystem::FileSystem
use std/engine/util::startup
use std/conv::toBytes
use std/flow/vec::flatten
use std/ops/num::isPositive
use std/conv::saturatingToI64

/*
    This script is not supposed to do anything at this point, only to be parsed.
*/

treatment main() {
    
    make_stream<Vec<Vec<Vec<Option<u16>>>>>(my_value = [[[_]]], something = "Hey")
    trigger<Vec<Vec<Vec<Option<u16>>>>>()
    write_file()

  make_stream.values -> trigger.stream,end -> write_file.trigger
}

treatment make_stream<T: Vec>(var my_value: T, var something: string)
  output values: Stream<T>
{
  startup()
  emit<T>(value = my_value)
  stream<T>()

  startup.trigger -> emit.trigger,emit -> stream.block,stream -> Self.values
}

treatment write_file()
  input trigger: Block<void>
{
  emit<string>(value="Okey !")
  stream<string>()
  Self.trigger -> emit.trigger

  emit_filename: emit<string>(value="something.txt")
  emit_filesystem: emit<FileSystem>(value=|local_filesystem())
  Self.trigger --------> emit_filename.trigger
  Self.trigger -> emit_filesystem.trigger

  emit_filename.emit ---> write.path
  emit_filesystem.emit -> write.filesystem

  toBytes<string>()
  flatten<byte>()
  write()

  emit.emit -> stream.block,stream -> toBytes.value,data -> flatten.vector,value -> write.data
}

treatment unusedDemonstration<N: Signed + SaturatingToI64>()
  input  floating_point_value: Stream<N>
  output integer_value: Stream<i64>
  output is_positive: Stream<bool>
{
    isPositive<N>()
    saturatingToI64<N>()

    Self.floating_point_value ------> isPositive.value,positive --> Self.is_positive
    Self.floating_point_value -> saturatingToI64.value,into ------> Self.integer_value
}