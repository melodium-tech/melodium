use std/flow::emit
use std/ops/option/block::unwrap
use std/ops/option::|wrap
use std/data/string_map::|entry
use std/data/string_map::StringMap
use std/engine/util::startup
use process/command::Command
use process/environment::Environment
use process/exec::Executor
use process/local::|local_executor
//use process/command::|command
use process/command::|raw_commands
use fs/filesystem::FileSystem
use fs/local::|local_filesystem
use fs/local::writeLocal
use log/logger::Logger
use log/logger::logs
use log/logger::stop
use log/console::console
use log/log::logErrors
use log/log::logInfoMessage
use log/log::logErrorMessage

use cicd/runners::CicdDistantEngine
use cicd/runners::CicdDistributionEngine
use cicd/runners::runner
use cicd/runners::stopRunner
use cicd/steps::stepOn
use work/resources::|container
use work/resources/arch::|arm64
use work/resources/arch::|amd64
use work/resources::|volume
use work/resources::|mount
use process/command::|command

treatment main(const key: string = "GfI84jhasy8dT5u1/2B4anBUb1d5pmaJNVBLoOmJvuZk5pHlV9J4HNsYFMgYqK7YGsGKPYab+RP7mvPHXHMmMg")
  model logger: Logger()
  model cicd: CicdDistantEngine(key=key)
  model distrib: CicdDistributionEngine()
{
    startup()

    allLogs: logs[logger=logger]()
    //stopLogs: stop[logger=logger]()
    logConsole: console(timestamp=true)
    allLogs.all -> logConsole.logs

    runnerArm64Musl: runner[distant_engine=cicd, cicd_engine=distrib, logger=logger](name="arm64-musl", cpu=1, memory=500, storage=300, volumes=[|volume("exchange", 100)], containers=[|container("rust", 4000, 2, 5000, |amd64(), [|mount("exchange", "/mounted/exchange")], "rust:bullseye", _)])
    stepArm64Musl: stepOn[distributor=distrib, logger=logger](executor_name="rust", commands=[
      |command("rustc", ["--version"]),
      |command("cargo", ["--version"]),
      |command("git", ["clone", "https://gitlab.com/melodium/melodium.git", "cloned"]),
      |command("bash", ["-c", "mv cloned/* ."]),
      |command("cargo", ["build", "--package", "melodium", "--release"]),
      |command("mv", ["target/release/melodium", "/mounted/exchange/melodium"]),
      |command("/mounted/exchange/melodium", ["--help"])
    ]
    //,out_filesystem="exchange", out_file="melodium"
    )
    downloadArm64Musl: stepOn[distributor=distrib, logger=logger](
      out_filesystem="exchange", out_file="melodium"
    )
    logInfoMessage[logger=logger](message="Step finished")
    stopRunner[cicd_engine=distrib]()

    startup.trigger -> runnerArm64Musl.trigger,ready -> stepArm64Musl.trigger,completed -> downloadArm64Musl.trigger,finished -> stopRunner.trigger
    //downloadArm64Musl.finished -> stopLogs.trigger
    downloadArm64Musl.finished -> logInfoMessage.trigger

    writeLocal(path="/tmp/melodium_amd64")
    downloadArm64Musl.data -> writeLocal.data
}

