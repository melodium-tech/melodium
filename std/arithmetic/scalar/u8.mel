use core/arithmetic/scalar::StaticAddU8

/**
Add a static value to `u8`.

Every number passed through the stream get `value` added.
*/
sequence StaticAdd(var value: u8 = 0)
  input  value: Stream<u8>
  output value: Stream<u8>
{
    StaticAddU8(value=value)

    Self.value -> StaticAddU8.value,value -> Self.value
}

use core/arithmetic/scalar::AddU8

/**
Add values from two streams of `u8`.

Values passed through a & b are added and send in sum.

*/
sequence Add()
  input  a:   Stream<u8>
  input  b:   Stream<u8>
  output sum: Stream<u8>
{
    AddU8()

    Self.a -> AddU8.a
    Self.b -> AddU8.b
    
    AddU8.sum -> Self.sum
}

use core/arithmetic/scalar::StaticSubU8 

/**
Substract a static value to `u8`.

Every number passed through the stream get `value` substracted.

*/
sequence StaticSub(var sub: u8 = 0)
  input  value: Stream<u8>
  output value: Stream<u8>
{
    StaticSubU8(sub=sub)

    Self.value -> StaticSubU8.value,value -> Self.value
}


use core/arithmetic/scalar::SubU8 

/**
Substract values from two streams of `u8`.

Every `a` number passed through the stream get `b` substracted.

*/
sequence Sub()
  input  a:          Stream<u8>
  input  b:          Stream<u8>
  output difference: Stream<u8>
{
    SubU8()

    Self.a -> SubU8.a
    Self.b -> SubU8.b
    
    SubU8.difference -> Self.difference
}


use core/arithmetic/scalar::StaticMultU8 

/**
Multiply `u8` by static value.

Every number passed through the stream is multiplied by `value`.

*/
sequence StaticMult(var factor: u8 = 0)
  input  value: Stream<u8>
  output value: Stream<u8>
{
    StaticMultU8(factor=factor)

    Self.value -> StaticMultU8.value,value -> Self.value
}


use core/arithmetic/scalar::MultU8 

/**
Multiply values from two streams of `u8`.

Every `a` number passed through the stream is multiplied by `b`.

*/
sequence Mult()
  input  a:       Stream<u8>
  input  b:       Stream<u8>
  output product: Stream<u8>
{
    MultU8()

    Self.a -> MultU8.a
    Self.b -> MultU8.b
    
    MultU8.product -> Self.product
}


use core/arithmetic/scalar::StaticDivU8 

/**
Divide a stream of `u8` by a static value.

Every number passed through the stream is divided by `value`.

*/
sequence StaticDiv(var divisor: u8 = 0)
  input  value: Stream<u8>
  output value: Stream<u8>
{
    StaticDivU8(divisor=divisor)

    Self.value -> StaticDivU8.value,value -> Self.value
}


use core/arithmetic/scalar::DivU8 

/**
Divide values from two streams of `u8`.

Every `a` number passed through the stream is divided by `b`.

*/
sequence Div()
  input  a:        Stream<u8>
  input  b:        Stream<u8>
  output quotient: Stream<u8>
{
    DivU8()

    Self.a -> DivU8.a
    Self.b -> DivU8.b
    
    DivU8.quotient -> Self.quotient
}


use core/arithmetic/scalar::StaticRemU8 

/**
Give the remainder of a stream of `u8` divided by a static value.

Every number passed through the stream is divided by `value` and the remainder is outputted.

*/
sequence StaticRem(var divisor: u8 = 0)
  input  value: Stream<u8>
  output value: Stream<u8>
{
    StaticRemU8(divisor=divisor)

    Self.value -> StaticRemU8.value,value -> Self.value
}


use core/arithmetic/scalar::RemU8 

/**
Give the remainder of the division from two streams of `u8`.

Every `a` number passed through the stream is divided by `b` and the remainder is outputted.

*/
sequence Rem()
  input  a:         Stream<u8>
  input  b:         Stream<u8>
  output remainder: Stream<u8>
{
    RemU8()

    Self.a -> RemU8.a
    Self.b -> RemU8.b
    
    RemU8.remainder -> Self.remainder
}




use core/arithmetic/scalar::StaticPowU8 

/**
Elevates `u8` to the power of a static value.

Every number passed through the stream get elevated to the power of `exponent`.
*/
sequence StaticPow(var exponent: u8 = 0)
  input  value: Stream<u8>
  output value: Stream<u8>
{
    StaticPowU8(exponent=exponent)

    Self.value -> StaticPowU8.value,value -> Self.value
}


use core/arithmetic/scalar::PowU8 

/**
Elevates values from a stream of `u8` to the power of another one.

Values passed through `base` are elevated to the power of `exponent`.

*/
sequence Pow()
  input  base:     Stream<u8>
  input  exponent: Stream<u8>
  output power:    Stream<u8>
{
    PowU8()

    Self.base -----> PowU8.base
    Self.exponent -> PowU8.exponent
    
    PowU8.power -> Self.power
}
