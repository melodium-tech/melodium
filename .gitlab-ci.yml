# Modified from original GitLab/Rust template

stages:
  - rust
  - melodium
  - deploy

# Optional: Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-a-service
# services:
#   - mysql:latest
#   - redis:latest
#   - postgres:latest

# Optional: Install a C compiler, cmake and git into the container.
# You will often need this when you (or any of your dependencies) depends on C code.
# before_script:
#   - apt-get update -yqq
#   - apt-get install -yqq --no-install-recommends build-essential

image: rust:latest

.x86_64-unknown-linux-gnu:
  before_script:
    - apt-get update
    - apt-get install -y libasound2-dev
  cache:
    key: $CI_COMMIT_SHA
    paths:
    - target/debug/melodium
    policy: pull

.pc-windows:
  tags:
    - shared-windows
    - windows
    - windows-1809

rust_build_x86_64-unknown-linux-gnu:
  stage: rust
  script:
    - rustc --version && cargo --version 
    - cargo build --verbose
    - cargo build --release --target x86_64-unknown-linux-gnu
    - cp target/x86_64-unknown-linux-gnu/release/melodium .
  extends: .x86_64-unknown-linux-gnu
  cache:
    policy: pull-push
  artifacts:
    name: "x86_64-unknown-linux-gnu"
    paths:
      - melodium
      - std/
    expire_in: 1 day

rust_unit_tests:
  stage: rust
  extends: .x86_64-unknown-linux-gnu
  script:
    - cargo test --tests --verbose

rust_doc_tests:
  stage: rust
  extends: .x86_64-unknown-linux-gnu
  script:
    - cargo test --doc --verbose

rust_build_i686-unknown-linux-gnu:
  stage: rust
  before_script:
   - dpkg --add-architecture i386
   - apt-get update
   - apt-get install -y gcc-multilib libasound2-dev:i386
   - rustup target add i686-unknown-linux-gnu
  script:
   - rustc --version && cargo --version
   - PKG_CONFIG=/usr/bin/i686-linux-gnu-pkg-config cargo build --verbose --target i686-unknown-linux-gnu
   - PKG_CONFIG=/usr/bin/i686-linux-gnu-pkg-config cargo build --release --target i686-unknown-linux-gnu
   - cp target/i686-unknown-linux-gnu/release/melodium .
  artifacts:
    name: "i686-unknown-linux-gnu"
    paths:
      - melodium
      - std/
    expire_in: 1 day

rust_build_aarch64-unknown-linux-gnu:
  stage: rust
  before_script:
   - dpkg --add-architecture arm64
   - apt-get update
   - apt-get install -y gcc-multilib binutils-aarch64-linux-gnu libgcc1-arm64-cross libc-dev:arm64 libasound2-dev:arm64
   - ln -s /usr/aarch64-linux-gnu/lib/libgcc_s.so.1 /usr/aarch64-linux-gnu/lib/libgcc_s.so
   - rustup target add aarch64-unknown-linux-gnu
  script:
   - rustc --version && cargo --version 
   - PKG_CONFIG=/usr/bin/aarch64-linux-gnu-pkg-config CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=/usr/aarch64-linux-gnu/bin/ld cargo build --verbose --target aarch64-unknown-linux-gnu
   - PKG_CONFIG=/usr/bin/aarch64-linux-gnu-pkg-config CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=/usr/aarch64-linux-gnu/bin/ld cargo build --release --target aarch64-unknown-linux-gnu
   - cp target/aarch64-unknown-linux-gnu/release/melodium .
  artifacts:
    name: "aarch64-unknown-linux-gnu"
    paths:
      - melodium
      - std/
    expire_in: 1 day

rust_build_x86_64-pc-windows-gnu:
  stage: rust
  before_script:
    - apt-get update
    - apt-get install -y mingw-w64
    - rustup target add x86_64-pc-windows-gnu
  script:
    - rustc --version && cargo --version 
    - cargo build --verbose --target x86_64-pc-windows-gnu
    - cargo build --release --target x86_64-pc-windows-gnu
    - cp target/x86_64-pc-windows-gnu/release/melodium.exe .
  artifacts:
    name: "x86_64-pc-windows-gnu"
    paths:
      - melodium.exe
      - std/
    expire_in: 1 day

rust_build_i686-pc-windows-gnu:
  stage: rust
  extends: .pc-windows
  before_script:
    - choco install mingw rust --yes --x86
  script:
    - rustc --version
    - cargo --version
    - cargo build --release --target i686-pc-windows-gnu
    - cp target/i686-pc-windows-gnu/release/melodium.exe .
  artifacts:
    name: "i686-pc-windows-gnu"
    paths:
      - melodium.exe
      - std/
    expire_in: 1 day

#
#rust_benchmark:
#  stage: benchmark_rust
#  script:
#    - cargo bench --benches --verbose

melodium_tests:
  stage: melodium
  extends: .x86_64-unknown-linux-gnu
  needs: ["rust_build_x86_64-unknown-linux-gnu"]
  script:
    - melodium-tests/run.sh

melodium_reference:
  stage: melodium
  variables:
    MELODIUM_DOC_TITLE: 'Mélodium Standard Reference'
    MELODIUM_DOC_AUTHOR: 'Quentin VIGNAUD'
  extends: .x86_64-unknown-linux-gnu
  needs: ["rust_build_x86_64-unknown-linux-gnu"]
  script:
    - mkdir bin
    - export PATH=$PWD/bin:$PATH
    - curl -sSL https://repo.melodium.tech/tooling/mdbook/mdbook-v0.4.18-x86_64-unkown-linux-gnu.tar.bz2 | tar -xj --directory=bin
    - curl -sSL https://repo.melodium.tech/tooling/mdbook-mermaid/mdbook-mermaid-v0.11.0-x86_64-unkown-linux-gnu.tar.bz2 | tar -xj --directory=bin
    - target/debug/melodium --stdlib ${PWD}/std/ --doc doc/ ${PWD}/std/
    - bin/mdbook-mermaid install doc/
    - bin/mdbook build doc/
  artifacts:
    name: "reference"
    paths:
      - doc/book
    expire_in: 1 day

pages:
  stage: deploy
  variables:
    MELODIUM_DOC_TITLE: 'Mélodium Standard Reference'
    MELODIUM_DOC_AUTHOR: 'Quentin VIGNAUD'
  extends: .x86_64-unknown-linux-gnu
  script:
    - mkdir bin
    - export PATH=$PWD/bin:$PATH
    - curl -sSL https://repo.melodium.tech/tooling/mdbook/mdbook-v0.4.18-x86_64-unkown-linux-gnu.tar.bz2 | tar -xj --directory=bin
    - curl -sSL https://repo.melodium.tech/tooling/mdbook-mermaid/mdbook-mermaid-v0.11.0-x86_64-unkown-linux-gnu.tar.bz2 | tar -xj --directory=bin
    - cargo doc --no-deps
    - mv target/doc public
    - target/debug/melodium --stdlib ${PWD}/std/ --doc /tmp/doc ${PWD}/std/
    - bin/mdbook-mermaid install /tmp/doc
    - bin/mdbook build /tmp/doc
    - mv /tmp/doc/book public/reference
  artifacts:
    paths:
      - public
  only:
    - master
