use local/gitlab::postGitlabState
use local/gitlab::|pending as |gitlab_pending
use local/gitlab::|running as |gitlab_running
use local/gitlab::|success as |gitlab_success
use local/gitlab::|failed as |gitlab_failed
use local/github::postGithubState
use local/github::|pending as |github_pending
use local/github::|success as |github_success
use local/github::|failure as |github_failure
use local/github::|error as |github_error
use log/logger::Logger
use std/flow::passBlock
use std/ops/bin::|and

treatment setServiceState[logger: Logger](
    report: bool = true,
    github: bool = false,
    gitlab: bool = false,
    github_token: string = "",
    github_project: string = "",
    github_sha: string = "",
    gitlab_root_url: string = "https://gitlab.com/api/v4",
    gitlab_token: string = "",
    gitlab_project_id: string = "",
    gitlab_sha: string = "",
    gitlab_ref: string = "",
    gitlab_pipeline_id: string = "",
    name: string,
    description: string = ""
)
  input pending: Block<void>
  input running: Block<void>
  input success: Block<void>
  input failed:  Block<void>
{
    passPendingGitlab: passBlock<void>(cond=|and<bool>(report, gitlab))
    pendingGitlab: postGitlabState[logger=logger](
        root_url=gitlab_root_url,
        token=gitlab_token,
        project=gitlab_project_id,
        sha=gitlab_sha,
        ref=gitlab_ref,
        pipeline=gitlab_pipeline_id,
        name=name,
        description=description,
        state=|gitlab_pending()
    )
    passRunningGitlab: passBlock<void>(cond=|and<bool>(report, gitlab))
    runningGitlab: postGitlabState[logger=logger](
        root_url=gitlab_root_url,
        token=gitlab_token,
        project=gitlab_project_id,
        sha=gitlab_sha,
        ref=gitlab_ref,
        pipeline=gitlab_pipeline_id,
        name=name,
        description=description,
        state=|gitlab_running()
    )
    passSuccessGitlab: passBlock<void>(cond=|and<bool>(report, gitlab))
    successGitlab: postGitlabState[logger=logger](
        root_url=gitlab_root_url,
        token=gitlab_token,
        project=gitlab_project_id,
        sha=gitlab_sha,
        ref=gitlab_ref,
        pipeline=gitlab_pipeline_id,
        name=name,
        description=description,
        state=|gitlab_success()
    )
    passFailedGitlab: passBlock<void>(cond=|and<bool>(report, gitlab))
    failedGitlab: postGitlabState[logger=logger](
        root_url=gitlab_root_url,
        token=gitlab_token,
        project=gitlab_project_id,
        sha=gitlab_sha,
        ref=gitlab_ref,
        pipeline=gitlab_pipeline_id,
        name=name,
        description=description,
        state=|gitlab_failed()
    )

    passPendingGithub: passBlock<void>(cond=|and<bool>(report, github))
    pendingGithub: postGithubState[logger=logger](
        token=github_token,
        project=github_project,
        sha=github_sha,
        name=name,
        description=description,
        state=|github_pending()
    )
    passSuccessGithub: passBlock<void>(cond=|and<bool>(report, github))
    successGithub: postGithubState[logger=logger](
        token=github_token,
        project=github_project,
        sha=github_sha,
        name=name,
        description=description,
        state=|github_success()
    )
    passErrorGithub: passBlock<void>(cond=|and<bool>(report, github))
    errorGithub: postGithubState[logger=logger](
        token=github_token,
        project=github_project,
        sha=github_sha,
        name=name,
        description=description,
        state=|github_error()
    )


    Self.pending -> passPendingGitlab.block,passed --> pendingGitlab.trigger
    Self.running -> passRunningGitlab.block,passed  -> runningGitlab.trigger
    Self.success -> passSuccessGitlab.block,passed  -> successGitlab.trigger
    Self.failed --> passFailedGitlab.block,passed  --> failedGitlab.trigger
    Self.pending -> passPendingGithub.block,passed  -> pendingGithub.trigger
    Self.success -> passSuccessGithub.block,passed  -> successGithub.trigger
    Self.failed --> passErrorGithub.block,passed  ---> errorGithub.trigger
}