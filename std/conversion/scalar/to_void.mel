
use core/conversion/scalar::U8ToVoid as CoreU8ToVoid

/**
Turns `u8` stream into `void` one.

Send one `iter` per input `value` received.
*/
sequence U8ToVoid()
  input value: Stream<u8>
  output iter: Stream<void>
{
    CoreU8ToVoid()

    Self.value -> CoreU8ToVoid.value,iter -> Self.iter
}



use core/conversion/scalar::U16ToVoid as CoreU16ToVoid

/**
Turns `u16` stream into `void` one.

Send one `iter` per input `value` received.
*/
sequence U16ToVoid()
  input value: Stream<u16>
  output iter: Stream<void>
{
    CoreU16ToVoid()

    Self.value -> CoreU16ToVoid.value,iter -> Self.iter
}



use core/conversion/scalar::U32ToVoid as CoreU32ToVoid

/**
Turns `u32` stream into `void` one.

Send one `iter` per input `value` received.
*/
sequence U32ToVoid()
  input value: Stream<u32>
  output iter: Stream<void>
{
    CoreU32ToVoid()

    Self.value -> CoreU32ToVoid.value,iter -> Self.iter
}



use core/conversion/scalar::U64ToVoid as CoreU64ToVoid

/**
Turns `u64` stream into `void` one.

Send one `iter` per input `value` received.
*/
sequence U64ToVoid()
  input value: Stream<u64>
  output iter: Stream<void>
{
    CoreU64ToVoid()

    Self.value -> CoreU64ToVoid.value,iter -> Self.iter
}



use core/conversion/scalar::U128ToVoid as CoreU128ToVoid

/**
Turns `u128` stream into `void` one.

Send one `iter` per input `value` received.
*/
sequence U128ToVoid()
  input value: Stream<u128>
  output iter: Stream<void>
{
    CoreU128ToVoid()

    Self.value -> CoreU128ToVoid.value,iter -> Self.iter
}



use core/conversion/scalar::I8ToVoid as CoreI8ToVoid

/**
Turns `i8` stream into `void` one.

Send one `iter` per input `value` received.
*/
sequence I8ToVoid()
  input value: Stream<i8>
  output iter: Stream<void>
{
    CoreI8ToVoid()

    Self.value -> CoreI8ToVoid.value,iter -> Self.iter
}



use core/conversion/scalar::I16ToVoid as CoreI16ToVoid

/**
Turns `i16` stream into `void` one.

Send one `iter` per input `value` received.
*/
sequence I16ToVoid()
  input value: Stream<i16>
  output iter: Stream<void>
{
    CoreI16ToVoid()

    Self.value -> CoreI16ToVoid.value,iter -> Self.iter
}



use core/conversion/scalar::I32ToVoid as CoreI32ToVoid

/**
Turns `i32` stream into `void` one.

Send one `iter` per input `value` received.
*/
sequence I32ToVoid()
  input value: Stream<i32>
  output iter: Stream<void>
{
    CoreI32ToVoid()

    Self.value -> CoreI32ToVoid.value,iter -> Self.iter
}



use core/conversion/scalar::I64ToVoid as CoreI64ToVoid

/**
Turns `i64` stream into `void` one.

Send one `iter` per input `value` received.
*/
sequence I64ToVoid()
  input value: Stream<i64>
  output iter: Stream<void>
{
    CoreI64ToVoid()

    Self.value -> CoreI64ToVoid.value,iter -> Self.iter
}



use core/conversion/scalar::I128ToVoid as CoreI128ToVoid

/**
Turns `i128` stream into `void` one.

Send one `iter` per input `value` received.
*/
sequence I128ToVoid()
  input value: Stream<i128>
  output iter: Stream<void>
{
    CoreI128ToVoid()

    Self.value -> CoreI128ToVoid.value,iter -> Self.iter
}



use core/conversion/scalar::F32ToVoid as CoreF32ToVoid

/**
Turns `f32` stream into `void` one.

Send one `iter` per input `value` received.
*/
sequence F32ToVoid()
  input value: Stream<f32>
  output iter: Stream<void>
{
    CoreF32ToVoid()

    Self.value -> CoreF32ToVoid.value,iter -> Self.iter
}



use core/conversion/scalar::F64ToVoid as CoreF64ToVoid

/**
Turns `f64` stream into `void` one.

Send one `iter` per input `value` received.
*/
sequence F64ToVoid()
  input value: Stream<f64>
  output iter: Stream<void>
{
    CoreF64ToVoid()

    Self.value -> CoreF64ToVoid.value,iter -> Self.iter
}



use core/conversion/scalar::BoolToVoid as CoreBoolToVoid

/**
Turns `bool` stream into `void` one.

Send one `iter` per input `value` received.
*/
sequence BoolToVoid()
  input value: Stream<bool>
  output iter: Stream<void>
{
    CoreBoolToVoid()

    Self.value -> CoreBoolToVoid.value,iter -> Self.iter
}



use core/conversion/scalar::ByteToVoid as CoreByteToVoid

/**
Turns `byte` stream into `void` one.

Send one `iter` per input `value` received.
*/
sequence ByteToVoid()
  input value: Stream<byte>
  output iter: Stream<void>
{
    CoreByteToVoid()

    Self.value -> CoreByteToVoid.value,iter -> Self.iter
}



use core/conversion/scalar::CharToVoid as CoreCharToVoid

/**
Turns `char` stream into `void` one.

Send one `iter` per input `value` received.
*/
sequence CharToVoid()
  input value: Stream<char>
  output iter: Stream<void>
{
    CoreCharToVoid()

    Self.value -> CoreCharToVoid.value,iter -> Self.iter
}



use core/conversion/scalar::StringToVoid as CoreStringToVoid

/**
Turns `string` stream into `void` one.

Send one `iter` per input `value` received.
*/
sequence StringToVoid()
  input value: Stream<string>
  output iter: Stream<void>
{
    CoreStringToVoid()

    Self.value -> CoreStringToVoid.value,iter -> Self.iter
}


