#!/usr/bin/env melodium
#! name = sql_test
#! version = 0.7.1
#! require = std:0.7.1
#! require = sql:0.7.1
#! require = fs:0.7.1

use std/engine/util::startup
use std/flow::emit
use fs/file::write
use sql::SqlPool
use sql::failure
use sql::executeRaw
use std/flow::trigger
use std/flow::stream
use std/conv::toString
use std/text/convert/string::toUtf8

treatment main(const server_url: string, conn_error_file: string, exec_error_file: string, success_file: string)
  model sql: SqlPool(url=server_url, min_connections=1)
{
    
    startup()
    failure[sql_pool=sql]()
    writeConnectionFailure: writeFile(path=conn_error_file)
    executeRaw[pool=sql](sql="CREATE TABLE table_test (foo TEXT, bar INT); INSERT INTO table_test (foo, bar) VALUES ('La r√©ponse', 42);")
    writeExecutionFailure: writeFile(path=exec_error_file)
    writeExecutionSuccess: writeFile(path=success_file)

    streamAffected: stream<u64>()
    affectedAsString: toString<u64>()
    affectedAsUtf8: toUtf8()

    startup.trigger -> executeRaw.trigger,affected -> streamAffected.block,stream -> affectedAsString.value,into -> affectedAsUtf8.text,encoded -> writeExecutionSuccess.data


    streamConnectionFailure: stream<string>()
    connectionFailureAsUtf8: toUtf8()

    failure.failure -> streamConnectionFailure.block,stream -> connectionFailureAsUtf8.text,encoded -> writeConnectionFailure.data

    streamExecutionFailure: stream<string>()
    executionFailureAsUtf8: toUtf8()

    executeRaw.failure -> streamExecutionFailure.block,stream -> executionFailureAsUtf8.text,encoded -> writeExecutionFailure.data
    
}

treatment writeFile(path: string)
  input data: Stream<byte>
{
    emit<string>(value=path)
    trigger<byte>()
    write()

    Self.data -> trigger.stream,start -> emit.trigger,emit -> write.path
    Self.data ----------------------------------------------> write.data
}