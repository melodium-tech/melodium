use core/conversion/scalar::U16ToVoid

/**
Turns `u16` stream into `void` one.

Send one `iter` per input `value` received.
*/
sequence ToVoid()
  input value: Stream<u16>
  output iter: Stream<void>
{
    U16ToVoid()

    Self.value -> U16ToVoid.value,iter -> Self.iter
}

use core/conversion/scalar::U16ToByte

/**
Convert stream of `u16` into `byte`.

`u16` gets converted into `byte`, and the resulting bytes are send through stream in continuity.
*/
sequence ToByte()
  input  value: Stream<u16>
  output data:  Stream<byte>
{
    U16ToByte()

    Self.value -> U16ToByte.value,data -> Self.data
}

use core/conversion/scalar::U16ToString

/**
Convert stream of `u16` into `string`.

`u16` gets converted into `string`, and the resulting strings are send through stream in continuity.
*/
sequence ToString()
  input  value: Stream<u16>
  output value: Stream<string>
{
    U16ToString()

    Self.value -> U16ToString.value,value -> Self.value
}

use core/cast/scalar::U16ToU32

/**
Convert stream of `u16` into `u32`.

This conversion is lossless, `u16` values can all fit into `u32`.
*/
sequence ToU32()
  input  value: Stream<u16>
  output value: Stream<u32>
{
    U16ToU32()

    Self.value -> U16ToU32.value,value -> Self.value
}


use core/cast/scalar::U16ToU64

/**
Convert stream of `u16` into `u64`.

This conversion is lossless, `u16` values can all fit into `u64`.
*/
sequence ToU64()
  input  value: Stream<u16>
  output value: Stream<u64>
{
    U16ToU64()

    Self.value -> U16ToU64.value,value -> Self.value
}


use core/cast/scalar::U16ToU128

/**
Convert stream of `u16` into `u128`.

This conversion is lossless, `u16` values can all fit into `u128`.
*/
sequence ToU128()
  input  value: Stream<u16>
  output value: Stream<u128>
{
    U16ToU128()

    Self.value -> U16ToU128.value,value -> Self.value
}


use core/cast/scalar::U16ToI32

/**
Convert stream of `u16` into `i32`.

This conversion is lossless, `u16` values can all fit into `i32`.
*/
sequence ToI32()
  input  value: Stream<u16>
  output value: Stream<i32>
{
    U16ToI32()

    Self.value -> U16ToI32.value,value -> Self.value
}


use core/cast/scalar::U16ToI64

/**
Convert stream of `u16` into `i64`.

This conversion is lossless, `u16` values can all fit into `i64`.
*/
sequence ToI64()
  input  value: Stream<u16>
  output value: Stream<i64>
{
    U16ToI64()

    Self.value -> U16ToI64.value,value -> Self.value
}


use core/cast/scalar::U16ToI128

/**
Convert stream of `u16` into `i128`.

This conversion is lossless, `u16` values can all fit into `i128`.
*/
sequence ToI128()
  input  value: Stream<u16>
  output value: Stream<i128>
{
    U16ToI128()

    Self.value -> U16ToI128.value,value -> Self.value
}


use core/cast/scalar::U16ToF32

/**
Convert stream of `u16` into `f32`.

This conversion is lossless, `u16` values can all fit into `f32`.
*/
sequence ToF32()
  input  value: Stream<u16>
  output value: Stream<f32>
{
    U16ToF32()

    Self.value -> U16ToF32.value,value -> Self.value
}


use core/cast/scalar::U16ToF64

/**
Convert stream of `u16` into `f64`.

This conversion is lossless, `u16` values can all fit into `f64`.
*/
sequence ToF64()
  input  value: Stream<u16>
  output value: Stream<f64>
{
    U16ToF64()

    Self.value -> U16ToF64.value,value -> Self.value
}


use core/cast/scalar::CastScalarU16ToU8

/**
Convert stream of `u16` into `u8`.

As this conversion might be lossy (every possible `u16` value cannot fit into `u8`),
`truncate` allows value to be truncated to fit into a `u8`, and `or_default` set the
value that is assigned when a `u16` is out of range for `u8` and truncation not allowed.

Truncation happens on the binary level, thus: `10010110` (150 if unsigned, -106 if [signed](https://en.wikipedia.org/wiki/Signed_number_representations)) → `0110` (6).
*/
sequence ToU8(var truncate: bool = true, var or_default: u8 = 0)
  input  value: Stream<u16>
  output value: Stream<u8>
{
    CastScalarU16ToU8(truncate=truncate, or_default=or_default)

    Self.value -> CastScalarU16ToU8.value,value -> Self.value
}


use core/cast/scalar::CastScalarU16ToI8

/**
Convert stream of `u16` into `i8`.

As this conversion might be lossy (every possible `u16` value cannot fit into `i8`),
`truncate` allows value to be truncated to fit into a `i8`, and `or_default` set the
value that is assigned when a `u16` is out of range for `i8` and truncation not allowed.

Truncation happens on the binary level, thus: `10010110` (150 if unsigned, -106 if [signed](https://en.wikipedia.org/wiki/Signed_number_representations)) → `0110` (6).
*/
sequence ToI8(var truncate: bool = true, var or_default: i8 = 0)
  input  value: Stream<u16>
  output value: Stream<i8>
{
    CastScalarU16ToI8(truncate=truncate, or_default=or_default)

    Self.value -> CastScalarU16ToI8.value,value -> Self.value
}


use core/cast/scalar::CastScalarU16ToI16

/**
Convert stream of `u16` into `i16`.

As this conversion might be lossy (every possible `u16` value cannot fit into `i16`),
`truncate` allows value to be truncated to fit into a `i16`, and `or_default` set the
value that is assigned when a `u16` is out of range for `i16` and truncation not allowed.

Truncation happens on the binary level, thus: `10010110` (150 if unsigned, -106 if [signed](https://en.wikipedia.org/wiki/Signed_number_representations)) → `0110` (6).
*/
sequence ToI16(var truncate: bool = true, var or_default: i16 = 0)
  input  value: Stream<u16>
  output value: Stream<i16>
{
    CastScalarU16ToI16(truncate=truncate, or_default=or_default)

    Self.value -> CastScalarU16ToI16.value,value -> Self.value
}


