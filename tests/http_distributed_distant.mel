#!/usr/bin/env melodium
#! name = http_distributed
#! version = 0.9.0-pre.5
#! require = http:=0.9.0-pre.5 std:=0.9.0-pre.5 javascript:=0.9.0-pre.5 encoding:=0.9.0-pre.5 json:=0.9.0-pre.5 work:=0.9.0-pre.5 distrib:=0.9.0-pre.5 fs:=0.9.0-pre.5 net:=0.9.0-pre.5

use http/server::HttpServer
use http/server::start as startHttp
use http/server::connection
use http/method::HttpMethod
use http/status::|ok
use http/status::HttpStatus
use http/method::|post
use net/ip::|localhost_ipv4
use net/ip::|from_ipv4
use std/flow::emit
use std/flow::trigger
use std/flow::stream
use std/flow::check
use std/flow/vec::flatten
use std/ops/option::unwrapOr
use std/ops/option::unwrap
use std/conv::toString
use std/data/string_map::StringMap
use std/data/string_map::|map
use std/engine/util::startup
use encoding::decode
use encoding::encode
use javascript::JavaScriptEngine
use javascript::process
use json::toJson
use json::Json
use json/value::|null
use fs/local::writeTextLocal
use work::DistantEngine
use work::distant
use work::Access

treatment main(const distant: string, const key: string)
  model distant: DistantEngine(address=distant, key=key)
  model distributor: DistributionEngine(treatment="http_distributed::js_function", version="=0.9.0-pre.5")
  model server: HttpServer(
    host=|from_ipv4(|localhost_ipv4()),
    port=8080
  )
{
    startup()
    distant[distant_engine=distant](max_duration=600, memory=280, cpu=1000, storage=256)
    start[distributor=distributor](params=|map([]))
    distributedJs[distributor=distributor]()
    startup.trigger -> distant.trigger,access -> start.access

    writeDistantFailure: writeTextLocal(path = "distant_failure.log")
    streamDistantFailure: stream<Vec<string>>()
    flatten<string>()
    distant.error -> streamDistantFailure.block,stream -> flatten.vector,value -> writeDistantFailure.text

    emitOk: emit<string>(value="ok")
    streamOk: stream<string>()
    writeOk: writeTextLocal(path = "ok.log")
    ready[distribution_engine=distributor]()
    writeDistribFailure: writeTextLocal(path = "distrib_failure.log")
    streamDistribFailure: stream<string>()
    distributionFailure[distribution_engine=distributor]()

    distributionFailure.error -> streamDistribFailure.block,stream -> writeDistribFailure.text
    ready.trigger -> emitOk.trigger,emit -> streamOk.block,stream -> writeOk.text

    startHttp[http_server=server]()
    check<Access>()
    distant.access -> check.value,check -> startHttp.trigger

    connection[http_server=server](method=|post(), route="/hello")
    status: emit<HttpStatus>(value=|ok())
    headers: emit<StringMap>(value=|map([]))
    trigger<byte>()
    
    connection.data -> trigger.stream,start --> status.trigger,emit -> connection.status
                       trigger.start --------> headers.trigger,emit -> connection.headers
    
    
    
    connection.data -> distributedJs.data,data -> connection.data
}

model JsEngine(): JavaScriptEngine {
    code = "function greet(someone) {
    return {
        response: `Hello ${someone}!`,
        ps: \"Thanks for contacting me :D\"}
    }"
}

treatment js_function()
  model JsEngine: JsEngine()
  input data: Stream<byte>
  output data: Stream<byte>
{
    process[engine=JsEngine](code="greet(value)")

    decode()
    toJson()
    unwrap<Json>()
    encode()
    unwrapOr<Json>(default=|null())
    toString<Json>()
    
    Self.data -> decode.data,text -> toJson.text,json -> unwrap.option,value -> process.value,result -> unwrapOr.option,value -> toString.value,into -> encode.text,data -> Self.data
}

use distrib::DistributionEngine
use distrib::distribute
use distrib::ready
use distrib::start
use distrib::sendStream
use distrib::recvStream
use distrib::distributionFailure

treatment distributedJs[distributor: DistributionEngine]()
  input data: Stream<byte>
  output data: Stream<byte>
{
  trigger<byte>()
  distribute[distributor=distributor](params=|map([]))

  Self.data -> trigger.stream,start -> distribute.trigger

  sendStream<byte>[distributor=distributor](name="data")
  recvStream<byte>[distributor=distributor](name="data")

  distribute.distribution_id -> sendStream.distribution_id
  distribute.distribution_id -> recvStream.distribution_id

  Self.data -> sendStream.data
  recvStream.data -> Self.data
}