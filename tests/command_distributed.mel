#!/usr/bin/env melodium
#! name = command_distributed
#! version = 0.9.0-pre.3
#! require = std:=0.9.0-pre.3 work:=0.9.0-pre.3 distrib:=0.9.0-pre.3 process:=0.9.0-pre.3 fs:=0.9.0-pre.3

use std/flow::emit
use std/flow::trigger
use std/flow::stream
use std/flow::check
use std/flow/vec::flatten
use std/ops/option::unwrapOr
use std/ops/option::unwrap
use std/conv::toString
use std/data/map::|map
use std/engine/util::startup
use work/distant::DistantEngine
use work/distant::distant
use work/access::Access
use work/resources::getExecutor
use work/resources::|container
use work/resources/arch::|amd64
use work/resources/arch::|arm64
use process/exec::spawn
use process/command::|command
use fs/local::writeTextLocal
use fs/local::writeLocal
use fs/local::readLocal

treatment main(const distant: string, const key: string, var input_data: string, var output_data: string)
  model distant: DistantEngine(address=distant, key=key)
  model distributor: DistributionEngine(treatment="command_distributed::command", version="=0.9.0-pre.3")
{
    startup()
    distant[distant_engine=distant](max_duration=600, memory=280, cpu=1000, storage=256, edition=_, volumes=[], arch=_, containers=[|container("ubuntu", 1000, 1000, 3000, |arm64(), [], "ubuntu:jammy", _)])
    start[distributor=distributor](params=|map([]))
    stop[distributor=distributor]()
    distributedCommand[distributor=distributor]()
    startup.trigger -> distant.trigger,access -> start.access

    writeDistantFailure: writeTextLocal(path = "distant_failure.log")
    streamDistantFailure: stream<Vec<string>>()
    flatten<string>()
    distant.failure -> streamDistantFailure.block,stream -> flatten.vector,value -> writeDistantFailure.text

    emitOk: emit<string>(value="ok")
    streamOk: stream<string>()
    writeOk: writeTextLocal(path = "ok.log")
    ready[distribution_engine=distributor]()
    writeDistribFailure: writeTextLocal(path = "distrib_failure.log")
    streamDistribFailure: stream<string>()
    distributionFailure[distribution_engine=distributor]()

    distributionFailure.failure -> streamDistribFailure.block,stream -> writeDistribFailure.text
    ready.trigger -> emitOk.trigger,emit -> streamOk.block,stream -> writeOk.text

    readLocal(path=input_data)
    writeLocal(path=output_data)

    ready.trigger -> readLocal.trigger,data -> distributedCommand.data,data -> writeLocal.data,finished -> stop.trigger
}

treatment command()
  input data:  Stream<byte>
  output data: Stream<byte>
{
    trigger<byte>()
    getExecutor(name = "ubuntu")
    spawn(command = |command("head", ["--bytes", "1024", "-"]), environment = _)

    Self.data -> trigger.stream,start -> getExecutor.trigger,executor -> spawn.executor
                 trigger.start ----------------------------------------> spawn.launch
    Self.data ---------------------------------------------------------> spawn.stdin,stdout -> Self.data
}

use distrib::DistributionEngine
use distrib::distribute
use distrib::ready
use distrib::start
use distrib::stop
use distrib::sendStream
use distrib::recvStream
use distrib::distributionFailure

treatment distributedCommand[distributor: DistributionEngine]()
  input data: Stream<byte>
  output data: Stream<byte>
{
  trigger<byte>()
  distribute[distributor=distributor](params=|map([]))

  Self.data -> trigger.stream,start -> distribute.trigger

  sendStream<byte>[distributor=distributor](name="data")
  recvStream<byte>[distributor=distributor](name="data")

  distribute.distribution_id -> sendStream.distribution_id
  distribute.distribution_id -> recvStream.distribution_id

  Self.data -> sendStream.data
  recvStream.data -> Self.data
}