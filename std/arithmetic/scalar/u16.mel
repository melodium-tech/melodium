use core/arithmetic/scalar::StaticAddU16

/**
Add a static value to `u16`.

Every number passed through the stream get `add` added.
*/
sequence StaticAdd(var add: u16 = 0)
  input  value: Stream<u16>
  output value: Stream<u16>
{
    StaticAddU16(add=add)

    Self.value -> StaticAddU16.value,value -> Self.value
}

use core/arithmetic/scalar::AddU16

/**
Add values from two streams of `u16`.

Values passed through a & b are added and send in sum.

*/
sequence Add()
  input  a:   Stream<u16>
  input  b:   Stream<u16>
  output sum: Stream<u16>
{
    AddU16()

    Self.a -> AddU16.a
    Self.b -> AddU16.b
    
    AddU16.sum -> Self.sum
}

use core/arithmetic/scalar::StaticSubU16 

/**
Substract a static value to `u16`.

Every number passed through the stream get `sub` substracted.

*/
sequence StaticSub(var sub: u16 = 0)
  input  value: Stream<u16>
  output value: Stream<u16>
{
    StaticSubU16(sub=sub)

    Self.value -> StaticSubU16.value,value -> Self.value
}


use core/arithmetic/scalar::SubU16 

/**
Substract values from two streams of `u16`.

Every `a` number passed through the stream get `b` substracted.

*/
sequence Sub()
  input  a:          Stream<u16>
  input  b:          Stream<u16>
  output difference: Stream<u16>
{
    SubU16()

    Self.a -> SubU16.a
    Self.b -> SubU16.b
    
    SubU16.difference -> Self.difference
}


use core/arithmetic/scalar::StaticMultU16 

/**
Multiply `u16` by static value.

Every number passed through the stream is multiplied by `factor`.

*/
sequence StaticMult(var factor: u16 = 0)
  input  value: Stream<u16>
  output value: Stream<u16>
{
    StaticMultU16(factor=factor)

    Self.value -> StaticMultU16.value,value -> Self.value
}


use core/arithmetic/scalar::MultU16 

/**
Multiply values from two streams of `u16`.

Every `a` number passed through the stream is multiplied by `b`.

*/
sequence Mult()
  input  a:       Stream<u16>
  input  b:       Stream<u16>
  output product: Stream<u16>
{
    MultU16()

    Self.a -> MultU16.a
    Self.b -> MultU16.b
    
    MultU16.product -> Self.product
}


use core/arithmetic/scalar::StaticDivU16 

/**
Divide a stream of `u16` by a static value.

Every number passed through the stream is divided by `divisor`.

*/
sequence StaticDiv(var divisor: u16 = 0)
  input  value: Stream<u16>
  output value: Stream<u16>
{
    StaticDivU16(divisor=divisor)

    Self.value -> StaticDivU16.value,value -> Self.value
}


use core/arithmetic/scalar::DivU16 

/**
Divide values from two streams of `u16`.

Every `a` number passed through the stream is divided by `b`.

*/
sequence Div()
  input  a:        Stream<u16>
  input  b:        Stream<u16>
  output quotient: Stream<u16>
{
    DivU16()

    Self.a -> DivU16.a
    Self.b -> DivU16.b
    
    DivU16.quotient -> Self.quotient
}


use core/arithmetic/scalar::StaticRemU16 

/**
Give the remainder of a stream of `u16` divided by a static value.

Every number passed through the stream is divided by `divisor` and the remainder is outputted.

*/
sequence StaticRem(var divisor: u16 = 0)
  input  value: Stream<u16>
  output value: Stream<u16>
{
    StaticRemU16(divisor=divisor)

    Self.value -> StaticRemU16.value,value -> Self.value
}


use core/arithmetic/scalar::RemU16 

/**
Give the remainder of the division from two streams of `u16`.

Every `a` number passed through the stream is divided by `b` and the remainder is outputted.

*/
sequence Rem()
  input  a:         Stream<u16>
  input  b:         Stream<u16>
  output remainder: Stream<u16>
{
    RemU16()

    Self.a -> RemU16.a
    Self.b -> RemU16.b
    
    RemU16.remainder -> Self.remainder
}




use core/arithmetic/scalar::StaticPowU16 

/**
Elevates `u16` to the power of a static value.

Every number passed through the stream get elevated to the power of `exponent`.
*/
sequence StaticPow(var exponent: u16 = 0)
  input  value: Stream<u16>
  output value: Stream<u16>
{
    StaticPowU16(exponent=exponent)

    Self.value -> StaticPowU16.value,value -> Self.value
}


use core/arithmetic/scalar::PowU16 

/**
Elevates values from a stream of `u16` to the power of another one.

Values passed through `base` are elevated to the power of `exponent`.

*/
sequence Pow()
  input  base:     Stream<u16>
  input  exponent: Stream<u16>
  output power:    Stream<u16>
{
    PowU16()

    Self.base -----> PowU16.base
    Self.exponent -> PowU16.exponent
    
    PowU16.power -> Self.power
}
