use core/conversion/scalar::StringToVoid

/**
Turns `string` stream into `void` one.

Send one `iter` per input `value` received.
*/
sequence ToVoid()
  input value: Stream<string>
  output iter: Stream<void>
{
    StringToVoid()

    Self.value -> StringToVoid.value,iter -> Self.iter
}

use core/conversion/scalar::StringToByte

/**
Convert stream of `string` into `Vec<byte>`.

`string` gets converted into `Vec<byte>`, each vector contains the bytes of the former scalar `string` it represents.
*/
sequence ToByte()
  input  value: Stream<string>
  output data:  Stream<Vec<byte>>
{
    StringToByte()

    Self.value -> StringToByte.value,data -> Self.data
}

use core/conversion/scalar::StringFromByte

/**
Convert stream of `Vec<byte>` into `string`.

Each received `byte` vector try to be converted into `string`, and if valid is sent as `value`. If the incoming vector 
is not valid for representing a `string` (i.e. not right size or invalid coding) it is refused and sent through `reject`.
*/
sequence FromByte()
  input  data:   Stream<Vec<byte>>
  output value:  Stream<string>
  output reject: Stream<Vec<byte>>
{
    StringFromByte()

    Self.data -> StringFromByte.data,value -> Self.value
                 StringFromByte.reject -----> Self.reject
}

