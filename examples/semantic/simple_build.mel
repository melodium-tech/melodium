
/*
 * Computes the HPCP of audio files and render them as images.
 * 
 * This script is an example of basic MÃ©lodium usage, as well as a test file.
 * As aimed as example for beginners, it is overdocumented on purpose,
 * repeating even syntaxically explicit expressions.
 *
 * /!\ Be careful when modifying, as tests use this file (especially documentation),
 *     any change may result in tests failures. Check `cargo test` before and after.
 *     
 */

use core/file::FileManager
use core/file::FlatFile
use core/audio::AudioManager
use core/audio::Decoder
use core/audio::Signal

use core/signal::FrameCutter as CoreFrameCutter
use core/signal::Windowing as CoreWindowing
use core/signal::Spectrum as CoreSpectrum
use core/signal::SpectralPeaks as CoreSpectralPeaks
use core/signal::HPCP as CoreHPCP

use std/image::SimpleImageRender

/*
 * Model definition called `Files`, from type `FileManager`.
 * - `directory`: working directory of the file manager
 */
model Files(directory: String): FileManager
{
    // Assignation of the `directory` parameter
    // from model type `FileManager` (left) to 
    // the local parameter `directory` of our `Files`
    // model definition (right).
    directory = directory
}

/*
 * Model definition called `AudioEngine`, from type `AudioManager`.
 */
model AudioEngine(): AudioManager
{
    // Assignation of the `sampleRate` parameter
    // from model type `AudioManager` to the
    // constant `44100`.
    sampleRate = 44100
}

/*
 * Sequence reading files and giving their content to an audio manager
 * for decoding.
 * - `Files`: model of `FileManager`
 * - `Audio`: model of `AudioManager`
 */
sequence ReadAudioFiles[Files: FileManager, Audio: AudioManager]()
    // Declaring treatment `FlatFile` as origin for the sequence,
    // based on `Files` model.
    origin File: FlatFile[Files=Files]()
{
    // Declaring treatment `Decoder`, based on `Audio` model.
    Decoder[AudioManager=Audio]()
    
    // Connecting `data` output from `File` to `data` input of `Decoder`.
    File.data -> Decoder.data
}

sequence AudioToHpcpImage[AudioManager: AudioManager](frameSize: Int = 4096, hopSize: Int = 2048, windowingType: String)
    origin AudioSignal: Signal[AudioManager=AudioManager]()
    require @File
    require @Signal
{
    Spectrum(frameSize=frameSize, hopSize=hopSize, windowingType=windowingType)
    HPCP(sampleRate=@Signal[sampleRate], minFrequency=40, maxFrequency=5000, harmonics=8, size=120)
    Image: SimpleImageRender(fileName=@File[name], format="png")
    
    AudioSignal.signal -> Spectrum.frame,spectrum -> HPCP.spectrum,hpcp -> Image.input
}

sequence Main(directory: String)
    model Files: Files(directory=directory)
    model Audio: AudioEngine()
{
    ReadAudioFiles[Files=Files, AudioManager=Audio]()
    AudioToHpcpImage[AudioManager=Audio]()
}

sequence Spectrum(frameSize: Int, hopSize: Int, windowingType: String) 
    input signal: Vec<Int>
    output spectrum: Mat<Int>
{

    CoreFrameCutter(frameSize=frameSize, hopSize=hopSize, startFromZero=true, lastFrameToEndOfFile=true)
    CoreWindowing(type=windowingType, size=frameSize)
    CoreSpectrum(size=frameSize)

    Self.signal -> CoreFrameCutter.signal,frame -> CoreWindowing.frame,frame -> CoreSpectrum.frame,spectrum -> Self.spectrum
}

sequence HPCP(sampleRate: Int = 44100, minFrequency: Int = 50, maxFrequency: Int = 1000, harmonics: Int = 8, size: Int = 120)
    input spectrum: Mat<Int>
    output hpcp: Mat<Int>
{

    CoreSpectralPeaks(sampleRate=sampleRate, orderBy="magnitude", magnitudeThreshold=0.00001, minFrequency=minFrequency, maxFrequency=maxFrequency, maxPeaks=10000)
    CoreHPCP(sampleRate=sampleRate, windowSize=0.5, harmonics=harmonics, weightType="cosine", size=size)

    Self.spectrum ------------------> CoreSpectralPeaks.spectrum
    
    CoreSpectralPeaks.frequencies --> CoreHPCP.frequencies
    CoreSpectralPeaks.magnitudes ---> CoreHPCP.magnitudes
    
    CoreHPCP.hpcp ------------------> Self.hpcp
}


