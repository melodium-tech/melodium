use cicd/services/gitlab::postGitlabState
use cicd/services/gitlab::|pending as |gitlab_pending
use cicd/services/gitlab::|running as |gitlab_running
use cicd/services/gitlab::|success as |gitlab_success
use cicd/services/gitlab::|failed as |gitlab_failed
use cicd/services/gitlab::|skipped as |gitlab_skipped
use cicd/services/gitlab::|canceled as |gitlab_canceled
use cicd/services/github::postGithubState
use cicd/services/github::|pending as |github_pending
use cicd/services/github::|success as |github_success
use cicd/services/github::|failure as |github_failure
use cicd/services/github::|error as |github_error
use log/logger::Logger
use std/flow::passBlock
use std/ops/bin::|and

treatment setServiceState[logger: Logger](report: bool, gitlab_root_url: string, token: string, project: string, sha: string, ref: string, pipeline: string, name: string, description: string, on_github: bool, on_gitlab: bool)
  input pending: Block<void>
  input running: Block<void>
  input success: Block<void>
  input failed:  Block<void>
  //input skipped: Block<void>
  //input canceled: Block<void>
{
    passPendingGitlab: passBlock<void>(cond=|and<bool>(report, on_gitlab))
    pendingGitlab: postGitlabState[logger=logger](
        root_url=gitlab_root_url,
        token=token,
        project=project,
        sha=sha,
        ref=ref,
        pipeline=pipeline,
        name=name,
        description=description,
        state=|gitlab_pending()
    )
    passRunningGitlab: passBlock<void>(cond=|and<bool>(report, on_gitlab))
    runningGitlab: postGitlabState[logger=logger](
        root_url=gitlab_root_url,
        token=token,
        project=project,
        sha=sha,
        ref=ref,
        pipeline=pipeline,
        name=name,
        description=description,
        state=|gitlab_running()
    )
    passSuccessGitlab: passBlock<void>(cond=|and<bool>(report, on_gitlab))
    successGitlab: postGitlabState[logger=logger](
        root_url=gitlab_root_url,
        token=token,
        project=project,
        sha=sha,
        ref=ref,
        pipeline=pipeline,
        name=name,
        description=description,
        state=|gitlab_success()
    )
    passFailedGitlab: passBlock<void>(cond=|and<bool>(report, on_gitlab))
    failedGitlab: postGitlabState[logger=logger](
        root_url=gitlab_root_url,
        token=token,
        project=project,
        sha=sha,
        ref=ref,
        pipeline=pipeline,
        name=name,
        description=description,
        state=|gitlab_failed()
    )
    /*
    passFailedGitlab: passBlock<void>(cond=|and<bool>(report, on_gitlab))
    skippedGitlab: postGitlabState[logger=logger](
        root_url=gitlab_root_url,
        token=token,
        project=project,
        sha=sha,
        ref=ref,
        pipeline=pipeline,
        name=name,
        description=description,
        state=|gitlab_skipped()
    )
    passCanceledGitlab: passBlock<void>(cond=|and<bool>(report, on_gitlab))
    canceledGitlab: postGitlabState[logger=logger](
        root_url=gitlab_root_url,
        token=token,
        project=project,
        sha=sha,
        ref=ref,
        pipeline=pipeline,
        name=name,
        description=description,
        state=|gitlab_canceled()
    )*/

    passPendingGithub: passBlock<void>(cond=|and<bool>(report, on_github))
    pendingGithub: postGithubState[logger=logger](
        token=token,
        project=project,
        sha=sha,
        name=name,
        description=description,
        state=|github_pending()
    )
    passSuccessGithub: passBlock<void>(cond=|and<bool>(report, on_github))
    successGithub: postGithubState[logger=logger](
        token=token,
        project=project,
        sha=sha,
        name=name,
        description=description,
        state=|github_success()
    )
    /*
    passFailureGithub: passBlock<void>(cond=|and<bool>(report, on_github))
    failureGithub: postGithubState[logger=logger](
        token=token,
        project=project,
        sha=sha,
        name=name,
        description=description,
        state=|github_failure()
    )*/
    passErrorGithub: passBlock<void>(cond=|and<bool>(report, on_github))
    errorGithub: postGithubState[logger=logger](
        token=token,
        project=project,
        sha=sha,
        name=name,
        description=description,
        state=|github_error()
    )


    Self.pending -> passPendingGitlab.block,passed -> pendingGitlab.trigger
    Self.running -> passRunningGitlab.block,passed  -> runningGitlab.trigger
    Self.success -> passSuccessGitlab.block,passed  -> successGitlab.trigger
    Self.failed -> passFailedGitlab.block,passed  -> failedGitlab.trigger
    Self.pending -> passPendingGithub.block,passed  -> pendingGithub.trigger
    Self.success -> passSuccessGithub.block,passed  -> successGithub.trigger
    Self.failed -> passErrorGithub.block,passed  -> errorGithub.trigger
    //Self.skipped -> skipped.trigger
    //Self.canceled -> canceled.trigger
}