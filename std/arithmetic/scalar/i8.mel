use core/arithmetic/scalar::StaticAddI8

/**
Add a static value to `i8`.

Every number passed through the stream get `value` added.
*/
sequence StaticAdd(var value: i8 = 0)
  input  value: Stream<i8>
  output value: Stream<i8>
{
    StaticAddI8(value=value)

    Self.value -> StaticAddI8.value,value -> Self.value
}

use core/arithmetic/scalar::AddI8

/**
Add values from two streams of `i8`.

Values passed through a & b are added and send in sum.

*/
sequence Add()
  input  a:   Stream<i8>
  input  b:   Stream<i8>
  output sum: Stream<i8>
{
    AddI8()

    Self.a -> AddI8.a
    Self.b -> AddI8.b
    
    AddI8.sum -> Self.sum
}

use core/arithmetic/scalar::StaticSubI8 

/**
Substract a static value to `i8`.

Every number passed through the stream get `value` substracted.

*/
sequence StaticSub(var sub: i8 = 0)
  input  value: Stream<i8>
  output value: Stream<i8>
{
    StaticSubI8(sub=sub)

    Self.value -> StaticSubI8.value,value -> Self.value
}


use core/arithmetic/scalar::SubI8 

/**
Substract values from two streams of `i8`.

Every `a` number passed through the stream get `b` substracted.

*/
sequence Sub()
  input  a:          Stream<i8>
  input  b:          Stream<i8>
  output difference: Stream<i8>
{
    SubI8()

    Self.a -> SubI8.a
    Self.b -> SubI8.b
    
    SubI8.difference -> Self.difference
}


use core/arithmetic/scalar::StaticMultI8 

/**
Multiply `i8` by static value.

Every number passed through the stream is multiplied by `value`.

*/
sequence StaticMult(var factor: i8 = 0)
  input  value: Stream<i8>
  output value: Stream<i8>
{
    StaticMultI8(factor=factor)

    Self.value -> StaticMultI8.value,value -> Self.value
}


use core/arithmetic/scalar::MultI8 

/**
Multiply values from two streams of `i8`.

Every `a` number passed through the stream is multiplied by `b`.

*/
sequence Mult()
  input  a:       Stream<i8>
  input  b:       Stream<i8>
  output product: Stream<i8>
{
    MultI8()

    Self.a -> MultI8.a
    Self.b -> MultI8.b
    
    MultI8.product -> Self.product
}


use core/arithmetic/scalar::StaticDivI8 

/**
Divide a stream of `i8` by a static value.

Every number passed through the stream is divided by `value`.

*/
sequence StaticDiv(var divisor: i8 = 0)
  input  value: Stream<i8>
  output value: Stream<i8>
{
    StaticDivI8(divisor=divisor)

    Self.value -> StaticDivI8.value,value -> Self.value
}


use core/arithmetic/scalar::DivI8 

/**
Divide values from two streams of `i8`.

Every `a` number passed through the stream is divided by `b`.

*/
sequence Div()
  input  a:        Stream<i8>
  input  b:        Stream<i8>
  output quotient: Stream<i8>
{
    DivI8()

    Self.a -> DivI8.a
    Self.b -> DivI8.b
    
    DivI8.quotient -> Self.quotient
}


use core/arithmetic/scalar::StaticRemI8 

/**
Give the remainder of a stream of `i8` divided by a static value.

Every number passed through the stream is divided by `value` and the remainder is outputted.

*/
sequence StaticRem(var divisor: i8 = 0)
  input  value: Stream<i8>
  output value: Stream<i8>
{
    StaticRemI8(divisor=divisor)

    Self.value -> StaticRemI8.value,value -> Self.value
}


use core/arithmetic/scalar::RemI8 

/**
Give the remainder of the division from two streams of `i8`.

Every `a` number passed through the stream is divided by `b` and the remainder is outputted.

*/
sequence Rem()
  input  a:         Stream<i8>
  input  b:         Stream<i8>
  output remainder: Stream<i8>
{
    RemI8()

    Self.a -> RemI8.a
    Self.b -> RemI8.b
    
    RemI8.remainder -> Self.remainder
}




use core/arithmetic/scalar::StaticPowI8 

/**
Elevates `i8` to the power of a static value.

Every number passed through the stream get elevated to the power of `exponent`.
*/
sequence StaticPow(var exponent: i8 = 0)
  input  value: Stream<i8>
  output value: Stream<i8>
{
    StaticPowI8(exponent=exponent)

    Self.value -> StaticPowI8.value,value -> Self.value
}


use core/arithmetic/scalar::PowI8 

/**
Elevates values from a stream of `i8` to the power of another one.

Values passed through `base` are elevated to the power of `exponent`.

*/
sequence Pow()
  input  base:     Stream<i8>
  input  exponent: Stream<i8>
  output power:    Stream<i8>
{
    PowI8()

    Self.base -----> PowI8.base
    Self.exponent -> PowI8.exponent
    
    PowI8.power -> Self.power
}

use core/arithmetic/scalar::AbsI8

/**
Get the absolute values from a stream of `i8`.

*/
sequence Abs()
  input  value: Stream<i8>
  output value: Stream<i8>
{
    AbsI8()

    Self.value -> AbsI8.value,value -> Self.value
}
