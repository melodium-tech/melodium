
use core/logic/byte::And as CoreAnd

/**
Makes "and" ⋀ binary operation on `byte`.

*/
sequence And()
  input  a: Stream<byte>
  input  b: Stream<byte>
  output result: Stream<byte>
{
    CoreAnd()

    Self.a -> CoreAnd.a,result -> Self.result
    Self.b -> CoreAnd.b
}

use core/logic/byte::Or as CoreOr

/**
Makes "or" ⋁ binary operation on `byte`.

*/
sequence Or()
  input  a: Stream<byte>
  input  b: Stream<byte>
  output result: Stream<byte>
{
    CoreOr()

    Self.a -> CoreOr.a,result -> Self.result
    Self.b -> CoreOr.b
}

use core/logic/byte::Xor as CoreXor

/**
Makes "xor" ⊕ binary operation on `byte`.

*/
sequence Xor()
  input  a: Stream<byte>
  input  b: Stream<byte>
  output result: Stream<byte>
{
    CoreXor()

    Self.a -> CoreXor.a,result -> Self.result
    Self.b -> CoreXor.b
}

use core/logic/byte::Not as CoreNot

/**
Makes "not" ¬ binary operation on `byte`.

*/
sequence Not()
  input  value: Stream<byte>
  output value: Stream<byte>
{
    CoreNot()

    Self.value -> CoreNot.value,value -> Self.value
}